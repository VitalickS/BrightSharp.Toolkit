<ResourceDictionary x:Class="BrightSharp.Themes.Theme"
                    x:ClassModifier="internal"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:bs="clr-namespace:BrightSharp.Extensions"
                    xmlns:conv="clr-namespace:BrightSharp.Converters">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Diagrams/DesignerItem.xaml" />
        <ResourceDictionary Source="Controls/ZoomControl.xaml" />
        <ResourceDictionary Source="Controls/PropertyGrid.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <!--Converters-->

    <conv:ThicknessConverter x:Key="ThickConv" />
    <JournalEntryUnifiedViewConverter x:Key="JournalEntryUnifiedViewConverter" />
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter" />
    <BooleanToVisibilityConverter x:Key="btvc" />
    <conv:InverseBooleanToVisibilityConverter x:Key="ibtvc" />

    <!--STYLES-->


    <ContextMenu x:Key="DecoTextBoxContextMenu">
        <MenuItem Command="ApplicationCommands.Copy">
            <MenuItem.Icon>
                <Image Source="icons/copy.png" />
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Command="ApplicationCommands.Cut">
            <MenuItem.Icon>
                <Image Source="icons/cut.png" />
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Command="ApplicationCommands.Paste">
            <MenuItem.Icon>
                <Image Source="icons/paste.png" />
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Command="ApplicationCommands.Undo">
            <MenuItem.Icon>
                <Image Source="icons/undo.png" />
            </MenuItem.Icon>
        </MenuItem>
    </ContextMenu>
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="3" StrokeThickness="1" Stroke="{DynamicResource DisabledForegroundBrush}" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonEllipseFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Ellipse
              Margin="2"
              StrokeThickness="1"
              Stroke="{DynamicResource DisabledForegroundBrush}"
              StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="{DynamicResource DefaultRadiusNormal}" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Defaulted_Storyboard">
                            <DoubleAnimation Storyboard.TargetName="BorderPressed" Storyboard.TargetProperty="Opacity" To=".7" AutoReverse="True" RepeatBehavior="Forever" />
                        </Storyboard>
                        <Storyboard x:Key="PressedOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.07" Storyboard.TargetName="BorderPressed" Storyboard.TargetProperty="Opacity" To="1">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="0">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="BorderPressed" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" To="1" />
                            <DoubleAnimation Duration="0:0:0.3" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.3" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border 
							x:Name="Border"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							Background="{TemplateBinding Background}"
						    BorderBrush="{TemplateBinding BorderBrush}"
						    BorderThickness="{TemplateBinding BorderThickness}" />
                        <Border 
							x:Name="BorderOver"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{DynamicResource DarkBrush}"
							BorderBrush="{DynamicResource NormalBorderBrush}"  Opacity="0"/>
                        <Border 
							x:Name="BorderPressed"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							BorderThickness="1"
							Background="{DynamicResource PressedBrush}"
							BorderBrush="{DynamicResource PressedBorderBrush}" Opacity="0" />
                        <Grid x:Name="iconPresenter" Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <ContentControl Focusable="False" Content="{TemplateBinding bs:MarkupExtensionProperties.Icon}" />
                            <ContentPresenter Grid.Column="1" x:Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1.5" />
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1.7" />
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Def_BeginStoryBoard" Storyboard="{StaticResource Defaulted_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="Def_BeginStoryBoard" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOff_Storyboard}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff_Storyboard}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.8" />
                            <Setter TargetName="iconPresenter" Property="Opacity" Value="0.8" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="MinHeight" Value="16" />
        <Setter Property="MinWidth" Value="16" />
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}"/>
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Defaulted_Storyboard">
                            <DoubleAnimation Storyboard.TargetName="BorderPressed" Storyboard.TargetProperty="Opacity" To=".7" AutoReverse="True" RepeatBehavior="Forever" />
                        </Storyboard>
                        <Storyboard x:Key="PressedOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.07" Storyboard.TargetName="BorderPressed" Storyboard.TargetProperty="Opacity" To="1">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="0">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="BorderPressed" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" To="1" />
                            <DoubleAnimation Duration="0:0:0.3" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.3" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border 
							x:Name="Border"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							Background="{TemplateBinding Background}"
						    BorderBrush="{TemplateBinding BorderBrush}"
						    BorderThickness="{TemplateBinding BorderThickness}" />
                        <Border 
							x:Name="BorderOver"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							BorderThickness="0,0,0,1"
							Background="{DynamicResource DarkBrush}"
							BorderBrush="{DynamicResource NormalBorderBrush}"  Opacity="0"/>
                        <Border 
							x:Name="BorderPressed"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							BorderThickness="1"
							Background="{DynamicResource PressedBrush}"
							BorderBrush="{DynamicResource PressedBorderBrush}" Opacity="0" />
                        <Grid x:Name="iconPresenter" Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <ContentControl Focusable="False" Content="{TemplateBinding bs:MarkupExtensionProperties.Icon}" />
                            <ContentPresenter Grid.Column="1" x:Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1.5" />
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1.7" />
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Def_BeginStoryBoard" Storyboard="{StaticResource Defaulted_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="Def_BeginStoryBoard" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOff_Storyboard}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff_Storyboard}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.8" />
                            <Setter TargetName="iconPresenter" Property="Opacity" Value="0.8" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <Style x:Key="CalendarDayButtonStyle" TargetType="{x:Type CalendarDayButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="MinWidth" Value="5"/>
        <Setter Property="MinHeight" Value="5"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource  ButtonFocusVisual}"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Label Content="{Binding}" Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=CalendarDayButton,AncestorLevel=1}}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarDayButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.1" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HighlightBackground"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HighlightBackground"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="HighlightBackground"/>
                                        <DoubleAnimation Duration="0" To="0.35" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalText"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected"/>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.75" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBackground"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="DayButtonFocusVisual">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="DayButtonFocusVisual">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active"/>
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalText"/>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalTextOver"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="DayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="RegularDay"/>
                                <VisualState x:Name="Today">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="TodayBackground"/>
                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalText"/>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalTextOver"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="BlackoutDayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="NormalDay"/>
                                <VisualState x:Name="BlackoutDay">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.4" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Blackout"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="TodayBackground" Stroke="{DynamicResource OnWindowForegroundBrush}" Fill="{DynamicResource DisabledBackgroundBrush}" Opacity="0" RadiusY="1" RadiusX="1"/>
                        <Rectangle x:Name="SelectedBackground" Fill="{DynamicResource PressedBrush}" Stroke="{DynamicResource PressedBorderBrush}" Opacity="0" RadiusY="1" RadiusX="1"/>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                        <Rectangle x:Name="HighlightBackground" Fill="{DynamicResource PressedBrush}" Opacity="0" RadiusY="1" RadiusX="1"/>
                        <ContentPresenter TextBlock.Foreground="{DynamicResource UiForegroundBrush}" x:Name="NormalTextOver" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Opacity="0"/>
                        <ContentPresenter TextBlock.Foreground="{TemplateBinding Foreground}" x:Name="NormalText" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="5,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                        <Path x:Name="Blackout" Data="M8.1772461,11.029181L10.433105,11.029181 11.700684,12.801641 12.973633,11.029181 15.191895,11.029181 12.844727,13.999395 15.21875,17.060919 12.962891,17.060919 11.673828,15.256231 10.352539,17.060919 8.1396484,17.060919 10.519043,14.042364z" Fill="Black" HorizontalAlignment="Stretch" Margin="3" Opacity="0" RenderTransformOrigin="0.5,0.5" Stretch="Fill" VerticalAlignment="Stretch"/>
                        <Rectangle x:Name="DayButtonFocusVisual" IsHitTestVisible="False" RadiusY="1" RadiusX="1" Stroke="{DynamicResource NormalBorderBrush}" Visibility="Collapsed"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CalendarItemStyle" TargetType="{x:Type CalendarItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Margin" Value="0,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarItem}">
                    <ControlTemplate.Resources>
                        <DataTemplate x:Key="{ComponentResourceKey ResourceId=DayTitleTemplate, TypeInTargetAssembly={x:Type CalendarItem}}">
                            <TextBlock FontWeight="Bold" FontSize="9.5" FontFamily="Verdana" HorizontalAlignment="Center" Margin="0,6" Text="{Binding}" VerticalAlignment="Center"/>
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}">
                            <Grid>
                                <Grid.Resources>
                                    <ControlTemplate x:Key="Ø" TargetType="{x:Type Button}">
                                        <Grid Cursor="Hand">
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup x:Name="CommonStates">
                                                    <VisualState x:Name="Normal"/>
                                                    <VisualState x:Name="MouseOver">
                                                        <Storyboard>
                                                            <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent"/>
                                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContentOver"/>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Disabled">
                                                        <Storyboard>
                                                            <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent"/>
                                                        </Storyboard>
                                                    </VisualState>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <ContentPresenter x:Name="buttonContentOver" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" TextElement.Foreground="{DynamicResource UiForegroundBrush}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,4,1,9" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Opacity="0" />
                                            <ContentPresenter x:Name="buttonContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" TextElement.Foreground="{DynamicResource OnWindowForegroundBrush}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,4,1,9" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </Grid>
                                    </ControlTemplate>
                                    <ControlTemplate x:Key="Ö" TargetType="{x:Type Button}">
                                        <Grid Cursor="Hand">
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup x:Name="CommonStates">
                                                    <VisualState x:Name="Normal"/>
                                                    <VisualState x:Name="MouseOver">
                                                        <Storyboard>
                                                            <ColorAnimation Duration="0" To="{DynamicResource UiForegroundColor}" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path"/>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Disabled">
                                                        <Storyboard>
                                                            <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="path"/>
                                                        </Storyboard>
                                                    </VisualState>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>
                                            <Grid>
                                                <Path x:Name="path" Data="M288.75,232.25L288.75,240.625 283,236.625z" Fill="{DynamicResource OnWindowForegroundBrush}" HorizontalAlignment="Left" Height="10" Margin="14,-6,0,0" Stretch="Fill" VerticalAlignment="Center" Width="6"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                    <ControlTemplate x:Key="×" TargetType="{x:Type Button}">
                                        <Grid Cursor="Hand">
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup x:Name="CommonStates">
                                                    <VisualState x:Name="Normal"/>
                                                    <VisualState x:Name="MouseOver">
                                                        <Storyboard>
                                                            <ColorAnimation Duration="0" To="{DynamicResource UiForegroundColor}" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path"/>
                                                        </Storyboard>
                                                    </VisualState>
                                                    <VisualState x:Name="Disabled">
                                                        <Storyboard>
                                                            <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="path"/>
                                                        </Storyboard>
                                                    </VisualState>
                                                </VisualStateGroup>
                                            </VisualStateManager.VisualStateGroups>
                                            <Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>
                                            <Grid>
                                                <Path x:Name="path" Data="M282.875,231.875L282.875,240.375 288.625,236z" Fill="{DynamicResource OnWindowForegroundBrush}" HorizontalAlignment="Right" Height="10" Margin="0,-6,14,0" Stretch="Fill" VerticalAlignment="Center" Width="6"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Button x:Name="PART_PreviousButton" Grid.Column="0" Focusable="False" HorizontalAlignment="Left" Height="20" Grid.Row="1" Width="28">
                                    <Button.Template>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup x:Name="CommonStates">
                                                        <VisualState x:Name="Normal"/>
                                                        <VisualState x:Name="MouseOver"/>
                                                        <VisualState x:Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="path"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>
                                                <Grid>
                                                    <Path x:Name="path" Data="M288.75,232.25L288.75,240.625 283,236.625z" Fill="{DynamicResource OnWindowForegroundBrush}" HorizontalAlignment="Center" Height="10" Stretch="Fill" VerticalAlignment="Center" Width="6"/>
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>
                                    </Button.Template>
                                </Button>
                                <Button x:Name="PART_HeaderButton" Grid.Column="1" FontWeight="Bold" Focusable="False" FontSize="10.5" HorizontalAlignment="Center" Grid.Row="1" VerticalAlignment="Center">
                                    <Button.Template>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup x:Name="CommonStates">
                                                        <VisualState x:Name="Normal"/>
                                                        <VisualState x:Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <ContentPresenter x:Name="buttonContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" TextElement.Foreground="{DynamicResource OnWindowForegroundBrush}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,4,1,9" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                            </Grid>
                                        </ControlTemplate>
                                    </Button.Template>
                                </Button>
                                <Button x:Name="PART_NextButton" Grid.Column="2" Focusable="False" HorizontalAlignment="Right" Height="20" Grid.Row="1" Width="28">
                                    <Button.Template>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Grid Cursor="Hand">
                                                <VisualStateManager.VisualStateGroups>
                                                    <VisualStateGroup x:Name="CommonStates">
                                                        <VisualState x:Name="Normal"/>
                                                        <VisualState x:Name="MouseOver"/>
                                                        <VisualState x:Name="Disabled">
                                                            <Storyboard>
                                                                <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="path"/>
                                                            </Storyboard>
                                                        </VisualState>
                                                    </VisualStateGroup>
                                                </VisualStateManager.VisualStateGroups>
                                                <Rectangle Fill="#11E5EBF1" Opacity="1" Stretch="Fill"/>
                                                <Grid>
                                                    <Path x:Name="path" Data="M282.875,231.875L282.875,240.375 288.625,236z" Fill="{DynamicResource OnWindowForegroundBrush}" HorizontalAlignment="Center" Height="10" Stretch="Fill" VerticalAlignment="Center" Width="6"/>
                                                </Grid>
                                            </Grid>
                                        </ControlTemplate>
                                    </Button.Template>
                                </Button>
                                <Grid x:Name="PART_MonthView" Grid.ColumnSpan="3" Grid.Column="0" HorizontalAlignment="Center" Margin="6,-1,6,6" Grid.Row="2" Visibility="Visible">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                </Grid>
                                <Grid x:Name="PART_YearView" Grid.ColumnSpan="3" Grid.Column="0" HorizontalAlignment="Center" Margin="6,-3,7,6" Grid.Row="2" Visibility="Hidden">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                </Grid>

                                <ContentControl Grid.ColumnSpan="3" Grid.Column="0" Grid.Row="0" Content="{Binding RelativeSource={RelativeSource AncestorType=Calendar}, Path=(bs:MarkupExtensionProperties.LeadingElement)}"></ContentControl>
                                <ContentControl Grid.ColumnSpan="3" Grid.Column="0" Grid.Row="3" Content="{Binding RelativeSource={RelativeSource AncestorType=Calendar}, Path=(bs:MarkupExtensionProperties.TrailingElement)}"></ContentControl>

                            </Grid>
                        </Border>
                        <Rectangle x:Name="PART_DisabledVisual" Fill="#A5FFFFFF" Opacity="0" RadiusY="2" RadiusX="2" Stretch="Fill" Stroke="#A5FFFFFF" StrokeThickness="1" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="PART_DisabledVisual" Value="Visible"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Calendar}}}" Value="Year">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Calendar}}}" Value="Decade">
                            <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden"/>
                            <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CalendarButtonStyle" TargetType="{x:Type CalendarButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="MinHeight" Value="42"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.1" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Background"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Background"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected"/>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.75" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="SelectedBackground"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active"/>
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalText"/>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="NormalTextOver"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="CalendarButtonFocusVisual">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Visibility" Storyboard.TargetName="CalendarButtonFocusVisual">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="SelectedBackground" Fill="{TemplateBinding Background}" Opacity="0" RadiusY="1" RadiusX="1"/>
                        <Rectangle x:Name="Background" Fill="{TemplateBinding Background}" Opacity="0" RadiusY="1" RadiusX="1" Stroke="{TemplateBinding BorderBrush}"/>
                        <ContentPresenter x:Name="NormalTextOver" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" TextElement.Foreground="{DynamicResource UiForegroundBrush}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,0,1,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Opacity="0"/>
                        <ContentPresenter x:Name="NormalText" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" TextElement.Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,0,1,1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Rectangle x:Name="CalendarButtonFocusVisual" IsHitTestVisible="False" RadiusY="1" RadiusX="1" Stroke="{TemplateBinding BorderBrush}" Visibility="Collapsed"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" TargetName="CalendarButtonFocusVisual" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Calendar}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="CalendarDayButtonStyle" Value="{DynamicResource CalendarDayButtonStyle}" />
        <Setter Property="CalendarItemStyle" Value="{DynamicResource CalendarItemStyle}" />
        <Setter Property="CalendarButtonStyle" Value="{DynamicResource CalendarButtonStyle}" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                        <CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Style="{TemplateBinding CalendarItemStyle}" bs:MarkupExtensionProperties.CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <EventSetter Event="PreviewMouseUp" Handler="CalendarPreviewMouseUp" />
    </Style>
    <Style x:Key="SwitchButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
							Margin="0,0,55,0"
							StrokeThickness="1"
							Stroke="{DynamicResource DisabledForegroundBrush}"
							StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Stroke="{DynamicResource DisabledForegroundBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionMarkFocusVisualLeft">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="18,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource DisabledForegroundBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionMarkFocusVisualRight">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="0,0,18,0" SnapsToDevicePixels="true" Stroke="{DynamicResource DisabledForegroundBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionMarkFocusVisualBottom">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="0,0,0,18" SnapsToDevicePixels="true" Stroke="{DynamicResource DisabledForegroundBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionMarkFocusVisualTop">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="0,18,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource DisabledForegroundBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="FocusVisualStyle"	Value="{DynamicResource CFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <DockPanel x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid Width="16" Height="16" DockPanel.Dock="{TemplateBinding bs:MarkupExtensionProperties.Docking}">
                            <Border x:Name="checkBoxBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" />
                            <Path Margin="3,3,1,1" StrokeThickness="1" Stroke="{DynamicResource GlyphBrush}" x:Name="optionMark" Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z " Fill="{DynamicResource GlyphBrush}" Opacity="0" Stretch="None"/>

                            <Rectangle x:Name="indeterminateMark" Opacity="0" Margin="3" Fill="{DynamicResource GlyphBrush}"/>

                        </Grid>
                        <ContentPresenter Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasContent" Value="true" />
                                <Condition Property="bs:MarkupExtensionProperties.Docking" Value="Right" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Padding" Value="0,0,4,0"/>
                            <Setter Property="FocusVisualStyle" Value="{DynamicResource OptionMarkFocusVisualRight}"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasContent" Value="true" />
                                <Condition Property="bs:MarkupExtensionProperties.Docking" Value="Left" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Padding" Value="4,0,0,0" />
                            <Setter Property="FocusVisualStyle" Value="{DynamicResource OptionMarkFocusVisualLeft}"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasContent" Value="true"/>
                                <Condition Property="bs:MarkupExtensionProperties.Docking" Value="Bottom" />
                            </MultiTrigger.Conditions>
                            <Setter Property="FocusVisualStyle" Value="{DynamicResource OptionMarkFocusVisualBottom}"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasContent" Value="true"/>
                                <Condition Property="bs:MarkupExtensionProperties.Docking" Value="Top" />
                            </MultiTrigger.Conditions>
                            <Setter Property="FocusVisualStyle" Value="{DynamicResource OptionMarkFocusVisualTop}"/>
                        </MultiTrigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="checkBoxBorder" Value="{DynamicResource DarkBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="optionMark" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="indeterminateMark" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>

                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="optionMark" Property="Stroke" Value="{DynamicResource PressedBorderBrush}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="indeterminateMark" Property="Stroke" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                            <Setter TargetName="indeterminateMark" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SwitchCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource OnWindowForegroundBrush}"/>
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="3" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource SwitchButtonFocusVisual}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Height" Value="27" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnChecking">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="24">
                                    <SplineDoubleKeyFrame.KeySpline>
                                        <KeySpline ControlPoint1="0 .4" />
                                    </SplineDoubleKeyFrame.KeySpline>
                                </SplineDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="OnUnchecking">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0">
                                    <SplineDoubleKeyFrame.KeySpline>
                                        <KeySpline ControlPoint1="0 .4" />
                                    </SplineDoubleKeyFrame.KeySpline>
                                </SplineDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <ThicknessAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(FrameworkElement.Margin)">
                                <SplineThicknessKeyFrame KeyTime="00:00:00.3000000" Value="1,1,1,1"/>
                            </ThicknessAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <DockPanel x:Name="dockPanel" LastChildFill="True">
                        <Grid Name="SwitcherGrid" DockPanel.Dock="Right" Margin="5,5,0,5" Width="50" Background="{DynamicResource NormalBrush}">
                            <TextBlock VerticalAlignment="Center" Foreground="{DynamicResource DisabledForegroundBrush}" Text="OFF" TextWrapping="Wrap" FontWeight="Bold" FontSize="12" HorizontalAlignment="Right" Margin="0,0,2,0"/>
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Margin="2,0,0,0" FontSize="12" FontWeight="Bold" Text="ON" TextWrapping="Wrap"/>
                            <Border HorizontalAlignment="Left" x:Name="slider" Width="23" BorderThickness="1,1,1,1" 
                                    CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
                                    RenderTransformOrigin="0.5,0.5" Margin="1,1,1,1"
                                    Background="{DynamicResource NormalBrush}"
                                    BorderBrush="{DynamicResource NormalBorderBrush}">
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Border.RenderTransform>

                            </Border>
                        </Grid>
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" VerticalAlignment="Center"/>

                    </DockPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="slider" Property="Background" Value="{DynamicResource PressedBrush}" />
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" x:Name="OnUnchecking_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource OnChecking}" x:Name="OnChecking_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            <Setter Property="Background" TargetName="SwitcherGrid" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter Property="Background" TargetName="slider" Value="{DynamicResource DisabledBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="2,2,22,2" StrokeThickness="1" Stroke="{DynamicResource DisabledForegroundBrush}" StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border
    			x:Name="Border" 
    			Grid.ColumnSpan="2"
    			CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}"
    			Background="{DynamicResource NormalBrush}"
    			BorderBrush="{TemplateBinding BorderBrush}"
    			BorderThickness="{TemplateBinding BorderThickness}" />
            <Border 
    			Grid.Column="0"
    			CornerRadius="2,0,0,2" 
    			Margin="1" 
    			Background="{TemplateBinding Background}" 
    			BorderBrush="{TemplateBinding BorderBrush}"
    			BorderThickness="0,0,1,0" />
            <Border Padding="0,0,1,0" Grid.Column="1" Width="{TemplateBinding bs:MarkupExtensionProperties.SpecialWidth}">
                <Path x:Name="Arrow"
    			Fill="{DynamicResource GlyphBrush}"
    			HorizontalAlignment="Center"
    			VerticalAlignment="Center"
    			Data="M 0 0 L 4 4 L 8 0 Z"/>
            </Border>

        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource OnWindowForegroundBrush}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="bs:MarkupExtensionProperties.SpecialWidth" Value="20" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="2" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="MinWidth" Value="50"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ComboBoxFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton Name="ToggleButton" 
              Template="{DynamicResource ComboBoxToggleButton}" bs:MarkupExtensionProperties.CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}"
              VerticalAlignment="Stretch" Focusable="false" Background="{TemplateBinding Background}" 
              BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
              IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
              ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter
              Name="ContentSite"
              IsHitTestVisible="False" 
              Content="{TemplateBinding SelectionBoxItem}"
              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
              Margin="2,2,23,2"
              VerticalAlignment="Center"
              HorizontalAlignment="Stretch" />
                        <TextBox x:Name="PART_EditableTextBox" 
              Visibility="Hidden" BorderBrush="Transparent" Background="{TemplateBinding Background}" 
              Padding="0" VerticalAlignment="Center" HorizontalAlignment="Stretch"
              Margin="0,0,23,0" bs:MarkupExtensionProperties.SpecialBrush="Transparent" 
              Foreground="{DynamicResource UiForegroundBrush}"
              IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Border Grid.RowSpan="3" x:Name="DropDownBorder" Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="{DynamicResource SolidBorderBrush}"/>
                                <ContentPresenter Content="{TemplateBinding bs:MarkupExtensionProperties.LeadingElement}" />
                                <ScrollViewer Grid.Row="1" Margin="3" SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                                <ContentPresenter Grid.Row="2" Content="{TemplateBinding bs:MarkupExtensionProperties.TrailingElement}" />
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="2"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility"	Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
						x:Name="Border"
						Padding="{TemplateBinding Padding}"
                        Margin="{TemplateBinding Margin}"
						SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource HighLightForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="false">
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource OnWindowForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="DataGrid">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource LightBorderBrush}" />
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource LightBorderBrush}" />
        <Setter Property="RowBackground" Value="{DynamicResource RowBackgroundBrush}" />
        <Setter Property="AlternatingRowBackground" Value="{DynamicResource AlternatingRowBackgroundBrush}" />
        <Setter Property="EnableRowVirtualization" Value="True" />
        <Setter Property="AutoGenerateColumns" Value="False" />
    </Style>
    <Style TargetType="DataGridRow">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource OnWindowForegroundBrush}" />
    </Style>
    <Style TargetType="DataGridColumnHeader">
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="SeparatorBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Padding" Value="4" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader">
                    <Grid>

                        <!--<Rectangle x:Name="BackgroundRectangle" Stretch="Fill" Fill="#FF1F3B53" Grid.ColumnSpan="2" />-->

                        <Border x:Name="BackgroundGradient" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding SeparatorBrush}" BorderThickness="0,0,1,1">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0.0" />
                                            <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="1.0" />
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="BackgroundOver" Opacity="0" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding SeparatorBrush}" BorderThickness="0,0,1,1">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource ControlMouseOverColor}" />
                            </Border.Background>
                        </Border>


                        <Path x:Name="Arrow" Fill="{DynamicResource GlyphBrush}"
    			                HorizontalAlignment="Center" Margin="0,2,0,0"
    			                VerticalAlignment="Top" RenderTransformOrigin=".5 .5"
    			                Data="M 0 0 L 4 4 L 8 0 Z"/>
                        <Grid Margin="{TemplateBinding Padding}">
                            <ContentPresenter RecognizesAccessKey="True" Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>

                        <Thumb Name="PART_LeftHeaderGripper" HorizontalAlignment="Left">
                            <Thumb.Style>
                                <Style TargetType="Thumb">
                                    <Setter Property="Width" Value="8" />
                                    <Setter Property="Background" Value="Transparent" />

                                    <Setter Property="Cursor" Value="SizeWE" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="Thumb">
                                                <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Thumb.Style>
                        </Thumb>
                        <Thumb Name="PART_RightHeaderGripper" HorizontalAlignment="Right">
                            <Thumb.Style>
                                <Style TargetType="Thumb">
                                    <Setter Property="Width" Value="8" />
                                    <Setter Property="Background" Value="Transparent" />
                                    <Setter Property="Cursor" Value="SizeWE"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="Thumb">
                                                <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Thumb.Style>
                        </Thumb>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="BackgroundOver" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="BackgroundOver" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="Arrow" Property="RenderTransform" Value="1 0 0 -1 0 0" />
                        </Trigger>
                        <Trigger Property="SortDirection" Value="{x:Null}">
                            <Setter TargetName="Arrow" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlMouseOverColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource ControlPressedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="Arrow">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" SnapsToDevicePixels="True" BorderThickness="0,0,1,0">
                            <Border.BorderBrush>
                                <LinearGradientBrush EndPoint="0.5,1"
                                   StartPoint="0.5,0">
                                    <GradientStop Color="{DynamicResource BorderLightColor}" Offset="0" />
                                    <GradientStop Color="{DynamicResource BorderMediumColor}" Offset="1" />
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0" />
                                    <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Polygon x:Name="Arrow" Margin="2" HorizontalAlignment="Right" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="Bottom" Fill="{DynamicResource GlyphBrush}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGridRowHeader}">
        <Style.Resources>
            <Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}">
                <Setter Property="Height" Value="4"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}, Path=HorizontalGridLinesBrush}" />
                <Setter Property="Cursor" Value="SizeNS"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="SeparatorBrush" Value="{DynamicResource GlyphBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid Visibility="{TemplateBinding SeparatorVisibility}" Background="Transparent">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
                                Padding="{TemplateBinding Padding}">
                            <Grid>
                                <StackPanel Orientation="Horizontal">
                                    <ContentPresenter RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                    <Control SnapsToDevicePixels="false" Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Visibility="{Binding (Validation.HasError), Converter={StaticResource btvc}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"/>
                                </StackPanel>

                            </Grid>
                        </Border>
                        <Border Background="{DynamicResource DarkBrush}" Visibility="{TemplateBinding IsRowSelected, Converter={StaticResource btvc}}">
                            <Path VerticalAlignment="Center" HorizontalAlignment="Center" Data="M0,0 4,4 0,8 z" Fill="{TemplateBinding SeparatorBrush}" Visibility="{TemplateBinding IsRowSelected, Converter={StaticResource btvc}}" />
                        </Border>
                        <Rectangle Width="1" HorizontalAlignment="Right" Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}, Path=VerticalGridLinesBrush}" />
                        <Thumb x:Name="PART_TopHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}" VerticalAlignment="Top" />
                        <Thumb x:Name="PART_BottomHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}" VerticalAlignment="Bottom" BorderThickness="0,0,0,1"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="2,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" />
                        <Border x:Name="HighlightFocused_Border" Opacity="0" 
                                BorderBrush="{DynamicResource UiForegroundBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" />
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Name="HighlightFocused_Border_Start">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightFocused_Border" Storyboard.TargetProperty="Opacity" From="1" To="0" AutoReverse="True" RepeatBehavior="Forever" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="HighlightFocused_Border_Start" />
                            </Trigger.ExitActions>
                            <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource SelectedBackgroundColor}" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="{DynamicResource HighLightForegroundBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource OnWindowForegroundBrush}"/>
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                    <Grid>
                        <Grid.Resources>
                            <SolidColorBrush x:Key="Ģ" Color="#FFAAAAAA"/>
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.1" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" To="#FF99C1E2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="ContentElement"/>
                                        <ColorAnimation Duration="0" To="#FF99C1E2" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="watermark_decorator"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unwatermarked"/>
                                <VisualState x:Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ContentElement"/>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Watermark"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="{x:Null}" GeneratedDuration="0" GeneratedEasingFunction="{x:Null}" Storyboard="{x:Null}" To="{x:Null}"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="FocusVisual"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" Opacity="1" Padding="{TemplateBinding Padding}">
                            <Grid x:Name="WatermarkContent">
                                <Border x:Name="ContentElement" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                                <Border x:Name="watermark_decorator" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0">
                                    <ContentControl x:Name="PART_Watermark" Focusable="False" IsHitTestVisible="False" Opacity="0" Padding="2"/>
                                </Border>
                                <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Border x:Name="FocusVisual" BorderBrush="{DynamicResource DisabledBorderBrush}" CornerRadius="1" IsHitTestVisible="False" Opacity="0"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DatePicker}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CalendarStyle" Value="{DynamicResource {x:Type Calendar}}" />
        <Setter Property="Foreground" Value="{DynamicResource OnWindowForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <EventSetter Event="Unloaded" Handler="DatePickerUnloaded"></EventSetter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DatePicker">
                    <Border BorderThickness="{TemplateBinding Border.BorderThickness}" Padding="{TemplateBinding Control.Padding}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates" />
                        </VisualStateManager.VisualStateGroups>
                        <Grid Name="PART_Root" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.Resources>
                                <ControlTemplate TargetType="Button" x:Key="ġ">
                                    <Grid>
                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup Name="CommonStates" />
                                        </VisualStateManager.VisualStateGroups>
                                        <Grid Background="#11FFFFFF" Width="19" Height="18" FlowDirection="LeftToRight" Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="20*" />
                                                <ColumnDefinition Width="20*" />
                                                <ColumnDefinition Width="20*" />
                                                <ColumnDefinition Width="20*" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="23*" />
                                                <RowDefinition Height="19*" />
                                                <RowDefinition Height="19*" />
                                                <RowDefinition Height="19*" />
                                            </Grid.RowDefinitions>
                                            <Border BorderThickness="1,1,1,1" CornerRadius="0,0,1,1" BorderBrush="#FF45D6FA" Name="Highlight" Margin="-1,-1,-1,-1" Opacity="0" Grid.Row="0" Grid.ColumnSpan="4" Grid.RowSpan="4" />
                                            <Border BorderThickness="1,1,1,1" CornerRadius="0.5,0.5,0.5,0.5" BorderBrush="#FFFFFFFF" Background="#FF1F3B53" Name="Background" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.ColumnSpan="4" Grid.RowSpan="3" />
                                            <Border BorderThickness="1,1,1,1" CornerRadius="0.5,0.5,0.5,0.5" BorderBrush="#BF000000" Name="BackgroundGradient" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.ColumnSpan="4" Grid.RowSpan="3">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0.7,0" EndPoint="0.7,1">
                                                        <LinearGradientBrush.GradientStops>
                                                            <GradientStop Color="#FFFFFFFF" Offset="0" />
                                                            <GradientStop Color="#F9FFFFFF" Offset="0.375" />
                                                            <GradientStop Color="#E5FFFFFF" Offset="0.625" />
                                                            <GradientStop Color="#C6FFFFFF" Offset="1" />
                                                        </LinearGradientBrush.GradientStops>
                                                    </LinearGradientBrush>
                                                </Border.Background>
                                            </Border>
                                            <Rectangle StrokeThickness="1" Grid.ColumnSpan="4" Grid.RowSpan="1">
                                                <Rectangle.Fill>
                                                    <LinearGradientBrush StartPoint="0.46,1.6" EndPoint="0.3,-1.1">
                                                        <LinearGradientBrush.GradientStops>
                                                            <GradientStop Color="#FF4084BD" />
                                                            <GradientStop Color="#FFAFCFEA" Offset="1" />
                                                        </LinearGradientBrush.GradientStops>
                                                    </LinearGradientBrush>
                                                </Rectangle.Fill>
                                                <Rectangle.Stroke>
                                                    <LinearGradientBrush StartPoint="0.48,1.25" EndPoint="0.48,-1">
                                                        <LinearGradientBrush.GradientStops>
                                                            <GradientStop Color="#FF494949" />
                                                            <GradientStop Color="#FF9F9F9F" Offset="1" />
                                                        </LinearGradientBrush.GradientStops>
                                                    </LinearGradientBrush>
                                                </Rectangle.Stroke>
                                            </Rectangle>
                                            <Path Data="M11.426758,8.4305077L11.749023,8.4305077 11.749023,16.331387 10.674805,16.331387 10.674805,10.299648 9.0742188,11.298672 9.0742188,10.294277C9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077z M14.65086,8.4305077L18.566387,8.4305077 18.566387,9.3435936 15.671368,9.3435936 15.671368,11.255703C15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 15.560365,16.438808 14.951641,16.234707 14.468243,15.826504L14.881817,14.929531C15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 15.83071,11.873379 15.399232,12.079271 15.016094,12.491055L14.65086,12.238613z" Stretch="Fill" Fill="#FF2F2F2F" Margin="4,3,4,3" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="4" Grid.RowSpan="3" />
                                            <Ellipse Fill="White" StrokeThickness="0" Width="3" Height="3" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.ColumnSpan="4" />
                                            <Border BorderThickness="1,1,1,1" CornerRadius="0,0,0.5,0.5" BorderBrush="#B2FFFFFF" Name="DisabledVisual" Opacity="0" Grid.Row="0" Grid.ColumnSpan="4" Grid.RowSpan="4" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                                <SolidColorBrush x:Key="Ġ">#A5FFFFFF</SolidColorBrush>
                            </Grid.Resources>
                            <Button Foreground="{TemplateBinding TextElement.Foreground}" Name="PART_Button" Width="20" Margin="1,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Focusable="False" Grid.Column="1" Grid.Row="0">
                                <Button.Template>
                                    <ControlTemplate TargetType="Button">
                                        <Grid>
                                            <VisualStateManager.VisualStateGroups>
                                                <VisualStateGroup Name="CommonStates" />
                                            </VisualStateManager.VisualStateGroups>
                                            <Grid Background="#11FFFFFF" Width="19" Height="18" FlowDirection="LeftToRight" Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="20*" />
                                                    <ColumnDefinition Width="20*" />
                                                    <ColumnDefinition Width="20*" />
                                                    <ColumnDefinition Width="20*" />
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="23*" />
                                                    <RowDefinition Height="19*" />
                                                    <RowDefinition Height="19*" />
                                                    <RowDefinition Height="19*" />
                                                </Grid.RowDefinitions>
                                                <Border BorderThickness="1,1,1,1" CornerRadius="0,0,1,1" BorderBrush="#FF45D6FA" Name="Highlight" Margin="-1,-1,-1,-1" Opacity="0" Grid.Row="0" Grid.ColumnSpan="4" Grid.RowSpan="4" />
                                                <Border BorderThickness="1,1,1,1" CornerRadius="0.5,0.5,0.5,0.5" BorderBrush="#FFFFFFFF" Background="#FF1F3B53" Name="Background" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.ColumnSpan="4" Grid.RowSpan="3" />
                                                <Border BorderThickness="1,1,1,1" CornerRadius="0.5,0.5,0.5,0.5" BorderBrush="#BF000000" Name="BackgroundGradient" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.ColumnSpan="4" Grid.RowSpan="3">
                                                    <Border.Background>
                                                        <LinearGradientBrush StartPoint="0.7,0" EndPoint="0.7,1">
                                                            <LinearGradientBrush.GradientStops>
                                                                <GradientStop Color="#FFFFFFFF" Offset="0" />
                                                                <GradientStop Color="#F9FFFFFF" Offset="0.375" />
                                                                <GradientStop Color="#E5FFFFFF" Offset="0.625" />
                                                                <GradientStop Color="#C6FFFFFF" Offset="1" />
                                                            </LinearGradientBrush.GradientStops>
                                                        </LinearGradientBrush>
                                                    </Border.Background>
                                                </Border>
                                                <Rectangle StrokeThickness="1" Grid.ColumnSpan="4" Grid.RowSpan="1">
                                                    <Rectangle.Fill>
                                                        <LinearGradientBrush StartPoint="0.46,1.6" EndPoint="0.3,-1.1">
                                                            <LinearGradientBrush.GradientStops>
                                                                <GradientStop Color="#FF4084BD" />
                                                                <GradientStop Color="#FFAFCFEA" Offset="1" />
                                                            </LinearGradientBrush.GradientStops>
                                                        </LinearGradientBrush>
                                                    </Rectangle.Fill>
                                                    <Rectangle.Stroke>
                                                        <LinearGradientBrush StartPoint="0.48,1.25" EndPoint="0.48,-1">
                                                            <LinearGradientBrush.GradientStops>
                                                                <GradientStop Color="#FF494949" />
                                                                <GradientStop Color="#FF9F9F9F" Offset="1" />
                                                            </LinearGradientBrush.GradientStops>
                                                        </LinearGradientBrush>
                                                    </Rectangle.Stroke>
                                                </Rectangle>
                                                <Path Data="M11.426758,8.4305077L11.749023,8.4305077 11.749023,16.331387 10.674805,16.331387 10.674805,10.299648 9.0742188,11.298672 9.0742188,10.294277C9.4788408,10.090176 9.9094238,9.8090878 10.365967,9.4510155 10.82251,9.0929432 11.176106,8.7527733 11.426758,8.4305077z M14.65086,8.4305077L18.566387,8.4305077 18.566387,9.3435936 15.671368,9.3435936 15.671368,11.255703C15.936341,11.058764 16.27293,10.960293 16.681133,10.960293 17.411602,10.960293 17.969301,11.178717 18.354229,11.615566 18.739157,12.052416 18.931622,12.673672 18.931622,13.479336 18.931622,15.452317 18.052553,16.438808 16.294415,16.438808 15.560365,16.438808 14.951641,16.234707 14.468243,15.826504L14.881817,14.929531C15.368796,15.326992 15.837872,15.525723 16.289043,15.525723 17.298809,15.525723 17.803692,14.895514 17.803692,13.635098 17.803692,12.460618 17.305971,11.873379 16.310528,11.873379 15.83071,11.873379 15.399232,12.079271 15.016094,12.491055L14.65086,12.238613z" Stretch="Fill" Fill="#FF2F2F2F" Margin="4,3,4,3" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="4" Grid.RowSpan="3" />
                                                <Ellipse Fill="#FFFFFFFF" StrokeThickness="0" Width="3" Height="3" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.ColumnSpan="4" />
                                                <Border BorderThickness="1,1,1,1" CornerRadius="0,0,0.5,0.5" BorderBrush="#B2FFFFFF" Name="DisabledVisual" Opacity="0" Grid.Row="0" Grid.ColumnSpan="4" Grid.RowSpan="4" />
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </Button.Template>
                            </Button>
                            <DatePickerTextBox BorderThickness="0" Background="{TemplateBinding Background}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Name="PART_TextBox" Focusable="{TemplateBinding UIElement.Focusable}" Grid.Column="0" Grid.Row="0" />
                            <Grid Name="PART_DisabledVisual" Opacity="0" IsHitTestVisible="False" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Rectangle RadiusX="1" RadiusY="1" Fill="#A5FFFFFF" Grid.Column="0" Grid.Row="0" />
                                <Rectangle RadiusX="1" RadiusY="1" Fill="#A5FFFFFF" Width="19" Height="18" Margin="3,0,3,0" Grid.Column="1" Grid.Row="0" />
                                <Popup Placement="Bottom" StaysOpen="False" AllowsTransparency="True" Name="PART_Popup" />
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(SystemParameters.HighContrast)}" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="PART_TextBox">
                                <Setter.Value>
                                    <Binding Path="Foreground" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Border
    		x:Name="Border"
    		Background="Transparent" Padding="7,0,0,0">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Path
    			x:Name="Arrow"
    			Fill="{DynamicResource GlyphBrush}"
    			HorizontalAlignment="Left"
    			VerticalAlignment="Center"
    			Data="M 0 0 L 4 4 L 8 0 Z M 0 4 L 4 8 L 8 4 Z"/>
                <ContentPresenter Grid.Column="1" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DarkBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Arrow" Property="Data" Value="M 0 4 L 4 0 L 8 4 Z M 0 8 L 4 4 L 8 8 Z" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="{DynamicResource LightColorBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="2.5,2.5,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition x:Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>
                        <Border
							x:Name="Border" 
							Grid.Row="0" 
							Background="{DynamicResource LightBrush}"
							BorderBrush="{DynamicResource NormalBorderBrush}"
							BorderThickness="1" 
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" >
                            <ToggleButton
									IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
									OverridesDefaultStyle="True"
									Template="{DynamicResource ExpanderToggleButton}" 
									Background="{DynamicResource NormalBrush}">
                                <ContentPresenter Margin="4" ContentSource="Header" RecognizesAccessKey="True" />
                            </ToggleButton>
                        </Border>
                        <Border 
							x:Name="Content" 
							Grid.Row="1" 
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}" 
							BorderThickness="1,0,1,1" 
							CornerRadius="0,0,2,2" >
                            <ContentPresenter Margin="4" ClipToBounds="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="*" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="Content" Property="Width" Value="0" />
                            <Setter TargetName="Content" Property="Height" Value="0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Frame}" x:Key="DevLabFrameStyle">
        <Setter Property="bs:MarkupExtensionProperties.HeaderHeight" Value="35" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialBrush" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Frame}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}">
                        <DockPanel>
                            <DockPanel DockPanel.Dock="Top" Height="{TemplateBinding bs:MarkupExtensionProperties.HeaderHeight}" Background="{TemplateBinding bs:MarkupExtensionProperties.SpecialBrush}">
                                <Viewbox DockPanel.Dock="{TemplateBinding bs:MarkupExtensionProperties.Docking}" Margin="3">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="16"/>
                                        </Grid.ColumnDefinitions>
                                        <Menu x:Name="NavMenu" Grid.ColumnSpan="3" Height="16" Margin="1,0,0,0" VerticalAlignment="Center">
                                            <Menu.Style>
                                                <Style TargetType="{x:Type Menu}">
                                                    <Setter Property="ItemsPanel">
                                                        <Setter.Value>
                                                            <ItemsPanelTemplate>
                                                                <DockPanel IsItemsHost="True"/>
                                                            </ItemsPanelTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                                                    <Setter Property="IsMainMenu" Value="False"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Menu}">
                                                                <ItemsPresenter/>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Menu.Style>
                                            <MenuItem Padding="0,2,4,0">
                                                <MenuItem.ItemContainerStyle>
                                                    <Style TargetType="{x:Type MenuItem}">
                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                        <Setter Property="Header" Value="{Binding (JournalEntry.Name)}"/>
                                                        <Setter Property="Command" Value="NavigationCommands.NavigateJournal"/>
                                                        <Setter Property="CommandTarget" Value="{Binding TemplatedParent, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type Menu}}}"/>
                                                        <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}"/>
                                                        <Setter Property="JournalEntryUnifiedViewConverter.JournalEntryPosition" Value="{Binding (JournalEntryUnifiedViewConverter.JournalEntryPosition)}"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                                                    <Grid x:Name="Panel" Background="Transparent" SnapsToDevicePixels="True">
                                                                        <Path x:Name="Glyph" HorizontalAlignment="Left" Height="10" Margin="7,5" StrokeStartLineCap="Triangle" SnapsToDevicePixels="False" StrokeEndLineCap="Triangle" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Width="10"/>
                                                                        <ContentPresenter ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" Margin="24,5,21,5"/>
                                                                    </Grid>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="JournalEntryUnifiedViewConverter.JournalEntryPosition" Value="Current">
                                                                            <Setter Property="Background" TargetName="Panel">
                                                                                <Setter.Value>
                                                                                    <SolidColorBrush Color="#FF3399FF" Opacity="0.25"/>
                                                                                </Setter.Value>
                                                                            </Setter>
                                                                            <Setter Property="Data" TargetName="Glyph" Value="M0,5L2.5,8 7,3"/>
                                                                            <Setter Property="FlowDirection" TargetName="Glyph" Value="LeftToRight"/>
                                                                            <Setter Property="StrokeLineJoin" TargetName="Glyph" Value="Miter"/>
                                                                        </Trigger>
                                                                        <Trigger Property="IsHighlighted" Value="True">
                                                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                                                            <Setter Property="Background" TargetName="Panel" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                                                        </Trigger>
                                                                        <MultiTrigger>
                                                                            <MultiTrigger.Conditions>
                                                                                <Condition Property="IsHighlighted" Value="True"/>
                                                                                <Condition Property="JournalEntryUnifiedViewConverter.JournalEntryPosition" Value="Forward"/>
                                                                            </MultiTrigger.Conditions>
                                                                            <Setter Property="Stroke" TargetName="Glyph" Value="White"/>
                                                                            <Setter Property="Data" TargetName="Glyph" Value="M1,5L7,5 M5,1L9,5 5,9"/>
                                                                        </MultiTrigger>
                                                                        <MultiTrigger>
                                                                            <MultiTrigger.Conditions>
                                                                                <Condition Property="IsHighlighted" Value="True"/>
                                                                                <Condition Property="JournalEntryUnifiedViewConverter.JournalEntryPosition" Value="Back"/>
                                                                            </MultiTrigger.Conditions>
                                                                            <Setter Property="Stroke" TargetName="Glyph" Value="White"/>
                                                                            <Setter Property="Data" TargetName="Glyph" Value="M9,5L3,5 M5,1L1,5 5,9"/>
                                                                        </MultiTrigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </MenuItem.ItemContainerStyle>
                                                <MenuItem.Style>
                                                    <Style TargetType="{x:Type MenuItem}">
                                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                                                        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type MenuItem}">
                                                                    <Grid>
                                                                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding (MenuItem.IsSubmenuOpen), RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom" VerticalOffset="2">
                                                                            <Border x:Name="SubMenuBorder" TextBlock.Foreground="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}">
                                                                                <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                                                                        <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                                                            <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                                                                        </Canvas>
                                                                                        <ItemsPresenter
                                                                                            x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Margin="2" KeyboardNavigation.TabNavigation="Cycle">
                                                                                            <ItemsPresenter.LayoutTransform>
                                                                                                <ScaleTransform ScaleX=".7" ScaleY=".7" />
                                                                                            </ItemsPresenter.LayoutTransform>
                                                                                        </ItemsPresenter>
                                                                                    </Grid>
                                                                                </ScrollViewer>
                                                                            </Border>
                                                                        </Popup>
                                                                        <Grid x:Name="Panel" Background="Transparent" HorizontalAlignment="Right" Width="26">
                                                                            <Border x:Name="HighlightBorder" BorderBrush="#B0B5BACE" BorderThickness="1" CornerRadius="2" SnapsToDevicePixels="True" Visibility="Hidden">
                                                                                <Border.Background>
                                                                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                        <GradientStop Color="#20DDDDDD" Offset="0"/>
                                                                                        <GradientStop Color="#80FFFFFF" Offset="1"/>
                                                                                    </LinearGradientBrush>
                                                                                </Border.Background>
                                                                                <Border BorderBrush="#A0FFFFFF" BorderThickness="1" CornerRadius="1.5"/>
                                                                            </Border>
                                                                            <Path x:Name="Arrow" Data="M0,0L4.5,5 9,0z" HorizontalAlignment="Right" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="False" Stroke="White" StrokeThickness="1" StrokeLineJoin="Round" VerticalAlignment="Center">
                                                                                <Path.Fill>
                                                                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                        <GradientStop Color="#FF33B5DA" Offset="0"/>
                                                                                        <GradientStop Color="#FF335799" Offset="1"/>
                                                                                    </LinearGradientBrush>
                                                                                </Path.Fill>
                                                                            </Path>
                                                                        </Grid>
                                                                    </Grid>
                                                                    <ControlTemplate.Triggers>
                                                                        <Trigger Property="IsHighlighted" Value="True">
                                                                            <Setter Property="Visibility" TargetName="HighlightBorder" Value="Visible"/>
                                                                        </Trigger>
                                                                        <Trigger Property="IsEnabled" Value="False">
                                                                            <Setter Property="Fill" TargetName="Arrow" Value="#FFA5AABE"/>
                                                                        </Trigger>
                                                                        <Trigger Property="CanContentScroll" SourceName="SubMenuScrollViewer" Value="False">
                                                                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                                                                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                                                                        </Trigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </MenuItem.Style>
                                                <MenuItem.ItemsSource>
                                                    <MultiBinding Converter="{StaticResource JournalEntryUnifiedViewConverter}">
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}"
                               Path="BackStack" />
                                                        <Binding RelativeSource="{RelativeSource TemplatedParent}"
                               Path="ForwardStack" />
                                                    </MultiBinding>
                                                </MenuItem.ItemsSource>
                                            </MenuItem>
                                        </Menu>
                                        <Path Grid.ColumnSpan="3" Grid.Column="0" Data="M22.5767,21.035Q27,19.37,31.424,21.035A12.5,12.5,0,0,0,53.5,13A12.5,12.5,0,0,0,37.765,0.926Q27,4.93,16.235,0.926A12.5,12.5,0,0,0,0.5,13A12.5,12.5,0,0,0,22.5767,21.035z" HorizontalAlignment="Left" IsHitTestVisible="False" Margin="2,0,0,0" SnapsToDevicePixels="False" StrokeThickness="1" VerticalAlignment="Center">
                                            <Path.Fill>
                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                    <GradientStop Color="#A0C2CCE7" Offset="0"/>
                                                    <GradientStop Color="#60FFFFFF" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Path.Fill>
                                            <Path.LayoutTransform>
                                                <ScaleTransform ScaleY="0.667" ScaleX="0.667"/>
                                            </Path.LayoutTransform>
                                            <Path.Stroke>
                                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                    <GradientStop Color="#FFB7C2E3" Offset="0.2"/>
                                                    <GradientStop Color="#A0FFFFFF" Offset="0.9"/>
                                                </LinearGradientBrush>
                                            </Path.Stroke>
                                        </Path>
                                        <Button Grid.Column="0" Margin="3,0,1,0">
                                            <Button.LayoutTransform>
                                                <ScaleTransform ScaleY="0.667" ScaleX="0.667"/>
                                            </Button.LayoutTransform>
                                            <Button.Style>
                                                <Style TargetType="{x:Type Button}">
                                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                    <Setter Property="Command" Value="NavigationCommands.BrowseBack"/>
                                                    <Setter Property="Focusable" Value="False"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Button}">
                                                                <Grid Background="Transparent" Height="24" Width="24">
                                                                    <Ellipse x:Name="Circle" StrokeThickness="1">
                                                                        <Ellipse.Fill>
                                                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                                <GradientStop Color="White" Offset="0"/>
                                                                                <GradientStop Color="#FFCCD4E9" Offset="0.1"/>
                                                                                <GradientStop Color="#FF4881D2" Offset="0.47"/>
                                                                                <GradientStop Color="#FF001A5A" Offset="0.47"/>
                                                                                <GradientStop Color="#FF007BD6" Offset="0.7"/>
                                                                                <GradientStop Color="#FF54DAFF" Offset="0.85"/>
                                                                                <GradientStop Color="#FF86FFFF" Offset="0.95"/>
                                                                                <GradientStop Color="White" Offset="1"/>
                                                                            </LinearGradientBrush>
                                                                        </Ellipse.Fill>
                                                                        <Ellipse.Stroke>
                                                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                <GradientStop Color="#FF6C90C4" Offset="0"/>
                                                                                <GradientStop Color="#FF315BB4" Offset="0.5"/>
                                                                                <GradientStop Color="#FF002091" Offset="0.5"/>
                                                                                <GradientStop Color="#FF08377C" Offset="1"/>
                                                                            </LinearGradientBrush>
                                                                        </Ellipse.Stroke>
                                                                    </Ellipse>
                                                                    <Path x:Name="Arrow" Data="M0.37,7.69L5.74,14.2A1.5,1.5,0,1,0,10.26,12.27L8.42,10.42 14.9,10.39A1.5,1.5,0,1,0,14.92,5.87L8.44,5.9 10.31,4.03A1.5,1.5,0,1,0,5.79,1.77z" HorizontalAlignment="Center" StrokeThickness="0.75" VerticalAlignment="Center">
                                                                        <Path.Fill>
                                                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                <GradientStop Color="White" Offset="0.5"/>
                                                                                <GradientStop Color="#FFEEEEEE" Offset="0.5"/>
                                                                                <GradientStop Color="#FFB0B0B0" Offset="1"/>
                                                                            </LinearGradientBrush>
                                                                        </Path.Fill>
                                                                        <Path.Stroke>
                                                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                <GradientStop Color="#FF8AB1FB" Offset="0"/>
                                                                                <GradientStop Color="#FF002874" Offset="1"/>
                                                                            </LinearGradientBrush>
                                                                        </Path.Stroke>
                                                                    </Path>
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Fill" TargetName="Circle">
                                                                            <Setter.Value>
                                                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                                    <GradientStop Color="White" Offset="0"/>
                                                                                    <GradientStop Color="#FFEBEEF5" Offset="0.5"/>
                                                                                    <GradientStop Color="#FFD8DDEB" Offset="0.5"/>
                                                                                    <GradientStop Color="#FFDFE2F0" Offset="1"/>
                                                                                </LinearGradientBrush>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                        <Setter Property="Stroke" TargetName="Circle" Value="#FFB5BACE"/>
                                                                        <Setter Property="Stroke" TargetName="Arrow" Value="#B0B5BACE"/>
                                                                        <Setter Property="Fill" TargetName="Arrow" Value="#D0FFFFFF"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Fill" TargetName="Circle">
                                                                            <Setter.Value>
                                                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                                    <GradientStop Color="White" Offset="0"/>
                                                                                    <GradientStop Color="#FFDFEDF9" Offset="0.1"/>
                                                                                    <GradientStop Color="#FF3086E1" Offset="0.47"/>
                                                                                    <GradientStop Color="#FF003B91" Offset="0.47"/>
                                                                                    <GradientStop Color="#FF1793EF" Offset="0.7"/>
                                                                                    <GradientStop Color="#FF5AD4FF" Offset="0.85"/>
                                                                                    <GradientStop Color="#FFBDFFFF" Offset="0.95"/>
                                                                                    <GradientStop Color="White" Offset="1"/>
                                                                                </LinearGradientBrush>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="Fill" TargetName="Circle">
                                                                            <Setter.Value>
                                                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                                    <GradientStop Color="#FFC0D2F5" Offset="0"/>
                                                                                    <GradientStop Color="#FF5E7A9C" Offset="0.47"/>
                                                                                    <GradientStop Color="#FF00062D" Offset="0.47"/>
                                                                                    <GradientStop Color="#FF005F9F" Offset="0.7"/>
                                                                                    <GradientStop Color="#FF1FA4E2" Offset="0.85"/>
                                                                                    <GradientStop Color="#FF61DAFF" Offset="0.95"/>
                                                                                    <GradientStop Color="#FF48CFFF" Offset="1"/>
                                                                                </LinearGradientBrush>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Button.Style>
                                        </Button>
                                        <Button Grid.Column="1" Margin="1,0,0,0">
                                            <Button.LayoutTransform>
                                                <ScaleTransform ScaleY="0.667" ScaleX="0.667"/>
                                            </Button.LayoutTransform>
                                            <Button.Style>
                                                <Style TargetType="{x:Type Button}">
                                                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                                                    <Setter Property="Command" Value="NavigationCommands.BrowseForward"/>
                                                    <Setter Property="Focusable" Value="False"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Button}">
                                                                <Grid Background="Transparent" Height="24" Width="24">
                                                                    <Ellipse x:Name="Circle" Grid.Column="0" StrokeThickness="1">
                                                                        <Ellipse.Fill>
                                                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                                <GradientStop Color="White" Offset="0"/>
                                                                                <GradientStop Color="#FFCCD4E9" Offset="0.1"/>
                                                                                <GradientStop Color="#FF4881D2" Offset="0.47"/>
                                                                                <GradientStop Color="#FF001A5A" Offset="0.47"/>
                                                                                <GradientStop Color="#FF007BD6" Offset="0.7"/>
                                                                                <GradientStop Color="#FF54DAFF" Offset="0.85"/>
                                                                                <GradientStop Color="#FF86FFFF" Offset="0.95"/>
                                                                                <GradientStop Color="White" Offset="1"/>
                                                                            </LinearGradientBrush>
                                                                        </Ellipse.Fill>
                                                                        <Ellipse.Stroke>
                                                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                <GradientStop Color="#FF6C90C4" Offset="0"/>
                                                                                <GradientStop Color="#FF315BB4" Offset="0.5"/>
                                                                                <GradientStop Color="#FF002091" Offset="0.5"/>
                                                                                <GradientStop Color="#FF08377C" Offset="1"/>
                                                                            </LinearGradientBrush>
                                                                        </Ellipse.Stroke>
                                                                    </Ellipse>
                                                                    <Path x:Name="Arrow" Grid.Column="0" Data="M0.37,7.69L5.74,14.2A1.5,1.5,0,1,0,10.26,12.27L8.42,10.42 14.9,10.39A1.5,1.5,0,1,0,14.92,5.87L8.44,5.9 10.31,4.03A1.5,1.5,0,1,0,5.79,1.77z" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0" StrokeThickness="0.75" VerticalAlignment="Center">
                                                                        <Path.Fill>
                                                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                <GradientStop Color="White" Offset="0.5"/>
                                                                                <GradientStop Color="#FFEEEEEE" Offset="0.5"/>
                                                                                <GradientStop Color="#FFB0B0B0" Offset="1"/>
                                                                            </LinearGradientBrush>
                                                                        </Path.Fill>
                                                                        <Path.RenderTransform>
                                                                            <ScaleTransform ScaleX="-1"/>
                                                                        </Path.RenderTransform>
                                                                        <Path.Stroke>
                                                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                                                <GradientStop Color="#FF8AB1FB" Offset="0"/>
                                                                                <GradientStop Color="#FF002874" Offset="1"/>
                                                                            </LinearGradientBrush>
                                                                        </Path.Stroke>
                                                                    </Path>
                                                                </Grid>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Fill" TargetName="Circle">
                                                                            <Setter.Value>
                                                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                                    <GradientStop Color="White" Offset="0"/>
                                                                                    <GradientStop Color="#FFEBEEF5" Offset="0.5"/>
                                                                                    <GradientStop Color="#FFD8DDEB" Offset="0.5"/>
                                                                                    <GradientStop Color="#FFDFE2F0" Offset="1"/>
                                                                                </LinearGradientBrush>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                        <Setter Property="Stroke" TargetName="Circle" Value="#FFB5BACE"/>
                                                                        <Setter Property="Stroke" TargetName="Arrow" Value="#B0B5BACE"/>
                                                                        <Setter Property="Fill" TargetName="Arrow" Value="#D0FFFFFF"/>
                                                                    </Trigger>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Fill" TargetName="Circle">
                                                                            <Setter.Value>
                                                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                                    <GradientStop Color="White" Offset="0"/>
                                                                                    <GradientStop Color="#FFDFEDF9" Offset="0.1"/>
                                                                                    <GradientStop Color="#FF3086E1" Offset="0.47"/>
                                                                                    <GradientStop Color="#FF003B91" Offset="0.47"/>
                                                                                    <GradientStop Color="#FF1793EF" Offset="0.7"/>
                                                                                    <GradientStop Color="#FF5AD4FF" Offset="0.85"/>
                                                                                    <GradientStop Color="#FFBDFFFF" Offset="0.95"/>
                                                                                    <GradientStop Color="White" Offset="1"/>
                                                                                </LinearGradientBrush>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="Fill" TargetName="Circle">
                                                                            <Setter.Value>
                                                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                                                    <GradientStop Color="#FFC0D2F5" Offset="0"/>
                                                                                    <GradientStop Color="#FF5E7A9C" Offset="0.47"/>
                                                                                    <GradientStop Color="#FF00062D" Offset="0.47"/>
                                                                                    <GradientStop Color="#FF005F9F" Offset="0.7"/>
                                                                                    <GradientStop Color="#FF1FA4E2" Offset="0.85"/>
                                                                                    <GradientStop Color="#FF61DAFF" Offset="0.95"/>
                                                                                    <GradientStop Color="#FF48CFFF" Offset="1"/>
                                                                                </LinearGradientBrush>
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Button.Style>
                                        </Button>

                                    </Grid>
                                </Viewbox>
                                <ContentControl Grid.Column="1" Content="{TemplateBinding bs:MarkupExtensionProperties.Header}" />

                            </DockPanel>
                            <ContentPresenter x:Name="PART_FrameCP" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CanGoForward" Value="False"/>
                                <Condition Property="CanGoBack" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="IsEnabled" TargetName="NavMenu" Value="False"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GlassButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonEllipseFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PressedOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="PressedGrid" Storyboard.TargetProperty="Opacity" To="1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="MainGrid" Storyboard.TargetProperty="Opacity" To="0">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="PressedGrid" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="MainGrid" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="OverGrid" Storyboard.TargetProperty="Opacity" To="1" />
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="MainGrid" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="OverGrid" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="MainGrid" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <!-- Background Layer -->
                        <Ellipse x:Name="MainEllipse" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" Fill="{TemplateBinding Background}"/>


                        <Grid x:Name="MainGrid">

                            <!-- Refraction Layer -->
                            <Ellipse x:Name="RefractionLayer">
                                <Ellipse.Fill>
                                    <RadialGradientBrush GradientOrigin="0.496,1.052">
                                        <RadialGradientBrush.RelativeTransform>
                                            <TransformGroup>
                                                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5"/>
                                                <TranslateTransform X="0.02" Y="0.3"/>
                                            </TransformGroup>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Offset="1" Color="#00000000"/>
                                        <GradientStop Offset="0.4" Color="#FFFFFFFF"/>
                                    </RadialGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                            <!-- Reflection Layer -->
                            <Path x:Name="ReflectionLayer" VerticalAlignment="Top" Stretch="Fill" RenderTransform="1 0 0 0.5 0 0">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathFigure IsClosed="True" StartPoint="98.59,45.37">
                                            <BezierSegment Point3="85.502,51.029" Point2="89.046,52.258" Point1="99.61,53.98"/>
                                            <BezierSegment IsSmoothJoin="True" Point3="50.167,45.196" Point2="69.111,45.196" Point1="75.86,47.685"/>
                                            <BezierSegment Point3="10.665,51.363" Point2="20.173,47.741" Point1="30.805,45.196"/>
                                            <BezierSegment IsSmoothJoin="True" Point3="2.377,41.662" Point2="0.987,49.8" Point1="7.469,52.58"/>
                                            <BezierSegment Point3="8.933,24.092" Point2="4.2177,31.945" Point1="3.355,35.938"/>
                                            <BezierSegment IsSmoothJoin="True" Point3="50,0" Point2="27.875,0" Point1="15.703,12.819"/>
                                            <BezierSegment Point3="93.35,27.6" Point2="87.26,14.89" Point1="72.198,0"/>
                                            <BezierSegment IsSmoothJoin="True" Point3="98.59,45.372" Point2="97.686,37.685" Point1="95.57,32.23"/>
                                        </PathFigure>
                                    </PathGeometry>
                                </Path.Data>
                                <Path.Fill>
                                    <RadialGradientBrush GradientOrigin="0.498,0.526">
                                        <RadialGradientBrush.RelativeTransform>
                                            <TransformGroup>
                                                <ScaleTransform
													CenterX="0.5"
													CenterY="0.5"
													ScaleX="1"
													ScaleY="1.997"/>
                                                <TranslateTransform X="0" Y="0.5"/>
                                            </TransformGroup>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Offset="1" Color="#FFFFFFFF"/>
                                        <GradientStop Offset="0.85" Color="#92FFFFFF"/>
                                        <GradientStop Offset="0" Color="#00000000"/>
                                    </RadialGradientBrush>
                                </Path.Fill>
                            </Path>

                        </Grid>


                        <Grid x:Name="OverGrid" Opacity="0">

                            <Ellipse x:Name="RefractionLayerOver">
                                <Ellipse.Fill>
                                    <RadialGradientBrush GradientOrigin="0.496,1.052">
                                        <RadialGradientBrush.RelativeTransform>
                                            <TransformGroup>
                                                <ScaleTransform
													CenterX="0.5"
													CenterY="0.5"
													ScaleX="1.5"
													ScaleY="1.5"/>
                                                <TranslateTransform X="0.02" Y="0.3"/>
                                            </TransformGroup>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Offset="1" Color="#00000000"/>
                                        <GradientStop Offset="0.45" Color="#FFFFFFFF"/>
                                    </RadialGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>


                            <Path x:Name="ReflectionLayerOver" VerticalAlignment="Top" Stretch="Fill">
                                <Path.RenderTransform>
                                    <ScaleTransform ScaleY="0.5" />
                                </Path.RenderTransform>
                                <Path.Fill>
                                    <RadialGradientBrush GradientOrigin="0.498,0.526">
                                        <RadialGradientBrush.RelativeTransform>
                                            <TransformGroup>
                                                <ScaleTransform
													CenterX="0.5"
													CenterY="0.5"
													ScaleX="1"
													ScaleY="1.997"/>
                                                <TranslateTransform X="0" Y="0.5"/>
                                            </TransformGroup>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Offset="1" Color="#FFFFFFFF"/>
                                        <GradientStop Offset="0.85" Color="#BBFFFFFF"/>
                                        <GradientStop Offset="0" Color="#00000000"/>
                                    </RadialGradientBrush>
                                </Path.Fill>
                            </Path>

                        </Grid>


                        <Grid x:Name="PressedGrid" Opacity="0">


                            <Ellipse x:Name="RefractionLayerPressed">
                                <Ellipse.Fill>
                                    <RadialGradientBrush GradientOrigin="0.496,1.052">
                                        <RadialGradientBrush.RelativeTransform>
                                            <TransformGroup>
                                                <ScaleTransform
													CenterX="0.5"
													CenterY="0.5"
													ScaleX="1.5"
													ScaleY="1.5"/>
                                                <TranslateTransform X="0.02" Y="0.3"/>
                                            </TransformGroup>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Offset="1" Color="#00000000"/>
                                        <GradientStop Offset="0.3" Color="#FFFFFFFF"/>
                                    </RadialGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>


                            <Path x:Name="ReflectionLayerPressed" VerticalAlignment="Top" Stretch="Fill">
                                <Path.RenderTransform>
                                    <ScaleTransform ScaleY="0.5" />
                                </Path.RenderTransform>
                                <Path.Fill>
                                    <RadialGradientBrush GradientOrigin="0.498,0.526">
                                        <RadialGradientBrush.RelativeTransform>
                                            <TransformGroup>
                                                <ScaleTransform
													CenterX="0.5"
													CenterY="0.5"
													ScaleX="1"
													ScaleY="1.997"/>
                                                <TranslateTransform X="0" Y="0.5"/>
                                            </TransformGroup>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Offset="1" Color="#CCFFFFFF"/>
                                        <GradientStop Offset="0.85" Color="#66FFFFFF"/>
                                        <GradientStop Offset="0" Color="#00000000"/>
                                    </RadialGradientBrush>
                                </Path.Fill>
                            </Path>

                        </Grid>



                        <!-- ContentPresenter -->
                        <ContentPresenter 
							Margin="2"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							RecognizesAccessKey="True"/>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="MainEllipse" Property="Stroke" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="MainEllipse" Property="Stroke" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Panel.ZIndex" Value="5" />
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOff_Storyboard}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff_Storyboard}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="MainEllipse" Property="Opacity" Value="0.65" />
                            <Setter TargetName="MainEllipse" Property="Stroke" Value="DarkGray" />
                            <!--<Setter TargetName="MainGrid" Property="TextBlock.Foreground" Value="DarkGray"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderBrush" Value="{DynamicResource UiForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}"/>
        <Setter Property="bs:MarkupExtensionProperties.HeaderPadding" Value="3,1,3,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="4" Grid.Column="0" 
                                CornerRadius="4" Grid.Row="1" Grid.RowSpan="3"/>
                        <Border BorderBrush="{DynamicResource LightBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                                <Border BorderBrush="{DynamicResource DisabledBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2"/>
                            </Border>
                        </Border>
                        <Border x:Name="Header" Grid.Column="1" Padding="{TemplateBinding bs:MarkupExtensionProperties.HeaderPadding}" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpandrStyleGroupBox" TargetType="{x:Type GroupBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="1,0,1,1" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="bs:MarkupExtensionProperties.HeaderPadding" Value="5,2" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialBrush" Value="{DynamicResource LightBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border
							Grid.Row="0" 
							Background="{TemplateBinding bs:MarkupExtensionProperties.SpecialBrush}"
							BorderBrush="{DynamicResource NormalBorderBrush}"
							BorderThickness="1" 
							CornerRadius="2,2,0,0" VerticalAlignment="Top" >
                            <ContentPresenter Margin="{TemplateBinding bs:MarkupExtensionProperties.HeaderPadding}"
								ContentSource="Header" 
								RecognizesAccessKey="True" />
                        </Border>
                        <Border 
							Grid.Row="1" 
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}" 
							BorderThickness="{TemplateBinding BorderThickness}" 
							CornerRadius="0,0,2,2" >
                            <ContentPresenter 
								Margin="{TemplateBinding Padding}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Expandr2StyleGroupBox" TargetType="{x:Type GroupBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialBrush" Value="{DynamicResource LightBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border
							Grid.Row="0" 
							Background="{TemplateBinding bs:MarkupExtensionProperties.SpecialBrush}"
							BorderBrush="{DynamicResource NormalBorderBrush}"
							BorderThickness="1,1,1,0" HorizontalAlignment="Left"
							CornerRadius="2,2,0,0" >
                            <ContentPresenter 
								Margin="4" 
								ContentSource="Header" 
								RecognizesAccessKey="True" />
                        </Border>
                        <Border 
							Grid.Row="1" 
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}" 
							BorderThickness="{TemplateBinding BorderThickness}" 
							CornerRadius="0,0,2,2" >
                            <ContentPresenter 
								Margin="{TemplateBinding Padding}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Foreground" Value="{DynamicResource OnWindowForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <ContentPresenter 
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="Padding" Value="1" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialWidth" Value="16" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialHeight" Value="16" />

        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border
						x:Name="Border" 
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}">
                        <ScrollViewer Background="Transparent" Margin="0" Focusable="false">
                            <ItemsPresenter Margin="{TemplateBinding Padding}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Padding" Value="2" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="1" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border 
						x:Name="Border"
						Padding="{TemplateBinding Padding}"
                        CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource HighLightForegroundBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource LightBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource OnWindowForegroundBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource SelectedUnfocusedColor}" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ListView">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="1.000001" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialWidth" Value="18" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialHeight" Value="18" />
    </Style>
    <Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
        <Setter Property="Width" Value="18" />
        <Setter Property="Background" Value="{DynamicResource NormalBorderBrush}">
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="Transparent">
                        <Rectangle HorizontalAlignment="Center" Width="1" Fill="{TemplateBinding Background}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black" Offset="0" />
                    <GradientStop Color="White" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="GridViewColumnHeader">
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridViewColumnHeader">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="BackgroundOver" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="BackgroundOver" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="HeaderBorder" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="0,1,0,1">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Color="{DynamicResource ControlLightColor}" Offset="0.0" />
                                            <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="1.0" />
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="BackgroundOver" Opacity="0" BorderBrush="{DynamicResource NormalBorderBrush}" BorderThickness="0,1,0,1">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource ControlMouseOverColor}" />
                            </Border.Background>
                        </Border>
                        <ContentPresenter x:Name="HeaderContent"
                              Margin="{TemplateBinding Padding}"
                              RecognizesAccessKey="True"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Thumb x:Name="PART_HeaderGripper" HorizontalAlignment="Right" Margin="0,0,-9,0" Style="{DynamicResource GridViewColumnHeaderGripper}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Role"
             Value="Floating">
                <Setter Property="Opacity"
              Value="0.7" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewColumnHeader">
                            <Canvas Name="PART_FloatingHeaderCanvas">
                                <Rectangle Fill="#60000000"
                         Width="{TemplateBinding ActualWidth}"
                         Height="{TemplateBinding ActualHeight}" />
                            </Canvas>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Role"
             Value="Padding">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewColumnHeader">
                            <Border Name="HeaderBorder" BorderBrush="{DynamicResource NormalBorderBrush}"
                    BorderThickness="0,1,0,1">
                                <Border.Background>
                                    <SolidColorBrush Color="{DynamicResource ControlLightColor}" />
                                </Border.Background>

                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>

    </Style>
    <Style TargetType="ListViewItem">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="2" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}"
                SnapsToDevicePixels="true" Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:.1" Value="{DynamicResource SelectedBackgroundColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="SelectedUnfocused">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0:0:.1" Value="{DynamicResource SelectedUnfocusedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource OnWindowForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource HighLightForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FileItemStyle" TargetType="ListViewItem">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource HorizontalLightBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="0">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Duration="0:0:.2" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" To="1">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:.2" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="0">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Duration="0:0:.2" Storyboard.TargetName="BorderSelected" Storyboard.TargetProperty="Opacity" To="1">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="SelectedUnfocused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:.2" Storyboard.TargetName="BorderSelected" Storyboard.TargetProperty="Opacity" To=".7">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border x:Name="Border" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" Background="Transparent" />
                        <Border x:Name="BorderOver" Opacity="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}"
                SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                        </Border>
                        <Border x:Name="BorderSelected" Opacity="0" BorderBrush="{DynamicResource PressedBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}"
                SnapsToDevicePixels="true" Background="{DynamicResource SelectedBackgroundBrush}">
                        </Border>

                        <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Grid>


                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource OnWindowForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource HighLightForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{DynamicResource NormalBorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
                        <ItemsPresenter ClipToBounds="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <DockPanel HorizontalAlignment="Stretch" LastChildFill="False" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border 
						x:Name="Border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="1" >
                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3"/>
                            <Setter TargetName="Border" Property="CornerRadius" Value="4"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Height" Value="2"/>
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
        <Setter Property="Margin" Value="5,3"/>
        <Setter Property="Background" Value="{DynamicResource WindowHeaderBrush}" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="VerticalAlignment" Value="Stretch">
                            <Setter Property="Height" Value="10" />
                            <Setter Property="Width" Value="2" />
                            <Setter Property="BorderThickness" Value="1,0,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="MouseEnterSb">
                <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="MenuBackground" Storyboard.TargetProperty="Opacity" To="1" />
            </Storyboard>
            <Storyboard x:Key="MouseLeaveSb">
                <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="MenuBackground" Storyboard.TargetProperty="Opacity" />
            </Storyboard>
        </ControlTemplate.Resources>
        <Border x:Name="Border">
            <Grid>
                <Border x:Name="MenuBackground" IsHitTestVisible="False" Background="{DynamicResource TopLevelMenuBackgroundHover}" Opacity="0" />
                <Popup
					x:Name="Popup"
                    Placement="Relative"
                    VerticalOffset="{Binding ElementName=Border, Path=ActualHeight}"
                    HorizontalOffset="{Binding ElementName=SubmenuBorder, Path=ActualWidth}"
					IsOpen="{TemplateBinding IsSubmenuOpen}"
					AllowsTransparency="True" 
					Focusable="False"
					PopupAnimation="Slide">
                    <Border 
						x:Name="SubmenuBorder"
						SnapsToDevicePixels="True"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}" >
                        <ItemsPresenter Grid.IsSharedSizeScope="True"
							KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
                <ContentPresenter
					Margin="6,3,6,3" TextBlock.Foreground="{DynamicResource MainMenuForegroundBrush}"
					ContentSource="Header"
					RecognizesAccessKey="True" />
                
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource MouseEnterSb}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource MouseLeaveSb}" />
                </Trigger.ExitActions>
            </Trigger>
            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="false" />
                    <Condition Property="IsEnabled" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource OnWindowForegroundBrush}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate 
		x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" 
		TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" >
            <Grid>
                <ContentPresenter 
					Margin="6,3,6,3" 
					ContentSource="Header" TextBlock.Foreground="{DynamicResource MainMenuForegroundBrush}"
					RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource NormalBrush}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="false" />
                    <Condition Property="IsEnabled" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource OnWindowForegroundBrush}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate 
		x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" 
		TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" Background="{TemplateBinding Background}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" MinWidth="80" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="15"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
					x:Name="Icon"
					Margin="6,0,6,0"
					VerticalAlignment="Center"
					ContentSource="Icon"/>
                <Border 
					x:Name="Check"  
					Width="13" Height="13" 
					Visibility="Collapsed"
					Margin="6,0,6,0" 
					Background="{DynamicResource NormalBrush}"
					BorderThickness="1"
					BorderBrush="{DynamicResource NormalBorderBrush}">
                    <Path 
						x:Name="CheckMark"
						Width="7" Height="7" 
						Visibility="Hidden" 
						SnapsToDevicePixels="False" 
						Stroke="{DynamicResource GlyphBrush}"
						StrokeThickness="2"
						Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <ContentPresenter 
					x:Name="HeaderHost"
					Grid.Column="1" VerticalAlignment="Center"
					ContentSource="Header"
					RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText" HorizontalAlignment="Right"
					Grid.Column="2"
					Text="{TemplateBinding InputGestureText}"
					Margin="8,2,0,2"
					DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="false" />
                    <Condition Property="IsEnabled" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource OnWindowForegroundBrush}"/>
            </MultiTrigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource HighLightForegroundBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true" />
                    <Condition Property="IsEnabled" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource HighLightForegroundBrush}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate 
		x:Key="SubMenuItemRadioButtonTemplate" 
		TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" Background="{TemplateBinding Background}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
					x:Name="Icon"
					Margin="6,0,6,0"
					VerticalAlignment="Center"
					ContentSource="Icon"/>
                <Grid Width="13" Height="13" Margin="6,0,6,0">
                    <Ellipse x:Name="Check"  
									Fill="{DynamicResource NormalBrush}"
									StrokeThickness="1" Visibility="Collapsed"
									Stroke="{DynamicResource NormalBorderBrush}" />
                    <Ellipse x:Name="CheckMark"
									Margin="4" Visibility="Hidden"  SnapsToDevicePixels="False" 
									Fill="{DynamicResource GlyphBrush}" />
                </Grid>


                <ContentPresenter 
					x:Name="HeaderHost"
					Grid.Column="1" VerticalAlignment="Center"
					ContentSource="Header"
					RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText"
					Grid.Column="2"
					Text="{TemplateBinding InputGestureText}"
					Margin="5,2,0,2"
					DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource HighLightForegroundBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate 
		x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" 
		TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" Background="{TemplateBinding Background}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition MinWidth="50" Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
					x:Name="Icon"
					Margin="6,0,6,0"
					VerticalAlignment="Center"
					ContentSource="Icon"/>
                <ContentPresenter 
					x:Name="HeaderHost"
					Grid.Column="1" VerticalAlignment="Center"
					ContentSource="Header"
					RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText"
					Grid.Column="2"
					Text="{TemplateBinding InputGestureText}"
					Margin="5,2,2,2"
					DockPanel.Dock="Right"/>
                <Path
					Grid.Column="3"
					HorizontalAlignment="Center"
					VerticalAlignment="Center"
					Data="M 0 0 L 0 8 L 4 4 Z" 
					Fill="{DynamicResource GlyphBrush}" />
                <Popup 
					x:Name="Popup"
					Placement="Right"
					HorizontalOffset="-4"
					IsOpen="{TemplateBinding IsSubmenuOpen}"
					AllowsTransparency="True" 
					Focusable="False"
					PopupAnimation="Fade">
                    <Border 
						x:Name="SubmenuBorder"
						SnapsToDevicePixels="True"
						Background="{DynamicResource WindowBackgroundBrush}"
						BorderBrush="{DynamicResource SolidBorderBrush}"
						BorderThickness="1" >
                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource HighLightForegroundBrush}" />
            </Trigger>
            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="false" />
                    <Condition Property="IsEnabled" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource OnWindowForegroundBrush}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="Transparent" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
                <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <ContextMenu x:Key="DecoPasswordBoxContextMenu">
        <MenuItem Command="ApplicationCommands.Paste">
            <MenuItem.Icon>
                <Image Source="icons/paste.png" />
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Command="ApplicationCommands.SelectAll" />
    </ContextMenu>
    <Style x:Key="{x:Type PasswordBox}" TargetType="{x:Type PasswordBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="0" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
        <Setter Property="PasswordChar" Value="●" />
        <Setter Property="ContextMenu" Value="{DynamicResource DecoPasswordBoxContextMenu}" />
        <Setter Property="Foreground" Value="{DynamicResource OnWindowForegroundBrush}" />
        <Setter Property="CaretBrush" Value="{DynamicResource DisabledForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup>
                                <VisualStateGroup.States>
                                    <VisualState Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="BorderOver" Duration="0:0:.4" Storyboard.TargetProperty="Opacity" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation To="1" Storyboard.TargetName="BorderOver" Duration="0:0:.4" Storyboard.TargetProperty="Opacity" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="Focused">
                                        <Storyboard>
                                            <DoubleAnimation To="1" Storyboard.TargetName="BorderOver" Duration="0:0:.2" Storyboard.TargetProperty="Opacity" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup.States>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border 
						x:Name="Border"
					    CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}"	
						Padding="2"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}" />
                        <Border 
						        x:Name="BorderOver" Opacity="0"
					            CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}"
						        BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}">
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource WindowBackgroundHoverColor}" />
                            </Border.Background>
                        </Border>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Content="{TemplateBinding bs:MarkupExtensionProperties.LeadingElement}" VerticalAlignment="Center" Margin="2,0,0,0" />
                            <ScrollViewer Grid.Column="1" Margin="0" x:Name="PART_ContentHost" />
                            <ContentPresenter Grid.Column="3" Content="{TemplateBinding bs:MarkupExtensionProperties.TrailingElement}" VerticalAlignment="Center" Margin="0,0,2,0" />
                        </Grid>
                        <Line Grid.Column="1" x:Name="FocusedLineHelper" VerticalAlignment="Top"
                                  Margin="5,1"
                                  X2="32" IsHitTestVisible="False" Stroke="{TemplateBinding bs:MarkupExtensionProperties.SpecialBrush}" StrokeThickness="2"
                                  Visibility="Collapsed" StrokeEndLineCap="Triangle" StrokeStartLineCap="Triangle" />

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="FocusedLineHelper" Property="Visibility" Value="Visible" />
                            <Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush" Value="Red" />
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)[0].ErrorContent}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ProgressBar}"
		TargetType="{x:Type ProgressBar}">
        <Setter Property="Background" Value="{DynamicResource NormalProgressBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid MinHeight="14" MinWidth="{TemplateBinding MinWidth}" ClipToBounds="True">
                        <Border 
							x:Name="PART_Track" 
							CornerRadius="2" 
							Background="{DynamicResource LightBrush}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="1" />
                        <Border 
							x:Name="PART_Indicator" CornerRadius="1"
							Background="{TemplateBinding Background}" 
							BorderBrush="{DynamicResource NormalBorderBrush}" 
							BorderThickness="1" 
							HorizontalAlignment="Left">

                        </Border>
                        <Border ClipToBounds="True" x:Name="Animation" MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Grid}}"
                                MaxHeight="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Grid}}">
                            <Rectangle x:Name="PART_GlowRect" Width="80" HorizontalAlignment="Left"
                                     Fill="{DynamicResource ProgressBarIndicatorAnimatedFill}"
                                     Margin="-80,-5,0,-5" />
                        </Border>


                        <Grid x:Name="IndeterminateRoot" Visibility="Collapsed">
                            <Grid.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="IndeterminateGradientFill"
                                                             Storyboard.TargetProperty="(Rectangle.RenderTransform).X"
                                                             RepeatBehavior="Forever" From="0" To="20" Duration="0:0:0.5" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Grid.Triggers>
                            <Rectangle Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" x:Name="IndeterminateSolidFill" Margin="1" Fill="{TemplateBinding Background}" RadiusX="2" RadiusY="2" Width="Auto" />
                            <Rectangle Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" x:Name="ProgressBarRootGradient" Margin="1" Panel.ZIndex="1" RadiusX="1.5" RadiusY="1.5" 
                                       Fill="{DynamicResource ProgressBarIndeterminateRootBrush}"/>

                            <Grid Margin="2,1" ClipToBounds="True">
                                <Rectangle Margin="-20,0" x:Name="IndeterminateGradientFill" StrokeThickness="1" RadiusX="2" RadiusY="2"
                                       Fill="{DynamicResource ProgressBarIndeterminateFillBrush}">
                                    <Rectangle.RenderTransform>
                                        <TranslateTransform />
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </Grid>



                        </Grid>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Setter Property="Visibility" TargetName="PART_Track" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_Indicator" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="IndeterminateRoot" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="PART_GlowRect" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_Indicator" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Setter TargetName="PART_Track" Property="Background" Value="{DynamicResource DarkBrush}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RadioButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
							Margin="15,0,0,0"
							StrokeThickness="1"
							Stroke="{DynamicResource DisabledForegroundBrush}"
							StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}" />
        <Setter Property="FocusVisualStyle"	Value="{DynamicResource RadioButtonFocusVisual}"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <BulletDecorator.Bullet>
                            <Border>
                                <Grid VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="13" Height="13">
                                    <Ellipse x:Name="Border"  
									Fill="{DynamicResource NormalBrush}"
									StrokeThickness="1"
									Stroke="{DynamicResource NormalBorderBrush}" />
                                    <Ellipse x:Name="CheckMark"
									Margin="3" Visibility="Hidden"
									Fill="{DynamicResource GlyphBrush}" />
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter 
							Margin="4,0,0,0"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Fill" Value="{DynamicResource DarkBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Fill" Value="{DynamicResource PressedBrush}" />
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource GlyphBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OptionRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{DynamicResource LightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource LightBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            								CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}"
                                                >
                        <Grid>
                            <Border x:Name="HighlightBorder" Background="{DynamicResource PressedBrush}" 
                            										CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius, ConverterParameter=-1, Converter={StaticResource ThickConv}}" Opacity="0" />
                            <Border x:Name="OverBorder" Background="{DynamicResource DarkBrush}" BorderThickness="1" 
                                                                        BorderBrush="{DynamicResource DefaultedBorderBrush}" 
                                                                        CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius, ConverterParameter=-1.2, Converter={StaticResource ThickConv}}" Opacity="0" />

                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HighlightBorder" Storyboard.TargetProperty="Opacity" Duration="0:0:.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OverBorder" Storyboard.TargetProperty="Opacity" To=".5" Duration="0:0:.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="OverBorder" Storyboard.TargetProperty="Opacity" Duration="0:0:.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="HighlightBorder" Property="Opacity" Value=".3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="Padding" Value="5,3" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="{DynamicResource DefaultRadiusNormal}" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="70"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PressedOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.07" Storyboard.TargetName="BorderPressed" Storyboard.TargetProperty="Opacity" To="1">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="0">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="BorderPressed" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" To="1" />
                            <DoubleAnimation Duration="0:0:0.3" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.3" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border 
							x:Name="Border"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							Background="{TemplateBinding Background}"
						    BorderBrush="{TemplateBinding BorderBrush}"
						    BorderThickness="{TemplateBinding BorderThickness}" />
                        <Border 
							x:Name="BorderOver"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							BorderThickness="1"
							Background="{DynamicResource DarkBrush}"
							BorderBrush="{DynamicResource NormalBorderBrush}"  Opacity="0"/>
                        <Border 
							x:Name="BorderPressed"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							BorderThickness="1"
							Background="{DynamicResource PressedBrush}"
							BorderBrush="{DynamicResource PressedBorderBrush}" Opacity="0" />
                        <Grid x:Name="iconPresenter" Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <ContentControl Focusable="False" Content="{TemplateBinding bs:MarkupExtensionProperties.Icon}" />
                            <ContentPresenter Grid.Column="1" x:Name="contentPresenter" RecognizesAccessKey="True"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOff_Storyboard}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff_Storyboard}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.8" />
                            <Setter TargetName="iconPresenter" Property="Opacity" Value="0.8" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ResizeGrip}">
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ResizeGrip}">
                    <Border Background="{TemplateBinding Background}"
                    Width="10" Height="10">
                        <Path Data="M7.677,7.53 L9.677,7.53 9.677,9.53 7.677,9.53 z M3.786,7.53 L5.786,7.53 5.786,9.53 3.786,9.53 z M0,7.53 L2,7.53 2,9.53 0,9.53 z M3.786,3.828 L5.786,3.828 5.7859998,5.828 3.786,5.828 z M7.677,3.766 L9.677,3.766 9.677,5.766 7.677,5.766 z M7.677,0 L9.677,0 9.677,2 7.677,2 z" Fill="{TemplateBinding Foreground}" Height="9.53" Stretch="Fill" VerticalAlignment="Top" Width="9.677"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="TextBoxBorder" EndPoint="0,20" MappingMode="Absolute" StartPoint="0,0">
        <GradientStop Color="#ABADB3" Offset="0.05"/>
        <GradientStop Color="#E2E3EA" Offset="0.07"/>
        <GradientStop Color="#E3E9EF" Offset="1"/>
    </LinearGradientBrush>
    <Style x:Key="{x:Type TextBoxBase}" BasedOn="{x:Null}" TargetType="{x:Type TextBoxBase}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="ContextMenu" Value="{DynamicResource DecoTextBoxContextMenu}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}"/>
        <Setter Property="TextDecorations" Value="Underline"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="Red"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="true">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type RichTextBox}">
        <Style.Resources>
            <Style x:Key="{x:Type FlowDocument}" TargetType="{x:Type FlowDocument}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
            </Style>
            <Style x:Key="{x:Type Hyperlink}" BasedOn="{StaticResource {x:Type Hyperlink}}" TargetType="{x:Type Hyperlink}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Foreground" Value="Blue"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="Foreground" Value="{DynamicResource OnWindowForegroundBrush}" />
        <Style.BasedOn>
            <StaticResource ResourceKey="{x:Type TextBoxBase}"/>
        </Style.BasedOn>
    </Style>
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Border 
						x:Name="Border"
						CornerRadius="{DynamicResource DefaultRadiusSmall}" 
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" />
                        <Path 
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Fill="{DynamicResource GlyphBrush}"
							Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            <Setter Property="Opacity" TargetName="Border" Value="0.2" />
                        </Trigger>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" Duration="0:0:.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarPageButtonVert" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarPageButtonHoriz" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PressedOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="ThumbDragging" Storyboard.TargetProperty="Opacity" To="1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Thumb" Storyboard.TargetProperty="Opacity" To="0">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="ThumbDragging" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Thumb" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="ThumbOver" Storyboard.TargetProperty="Opacity" To="1" />
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="Thumb" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="ThumbOver" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Thumb" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>

                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Thumb"
							CornerRadius="{DynamicResource DefaultRadiusNormal}" 
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="1" />
                        <Border x:Name="ThumbOver"
							CornerRadius="{DynamicResource DefaultRadiusNormal}" 
							Background="{DynamicResource DarkBrush}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="1" Opacity="0" />
                        <Border x:Name="ThumbDragging"
							CornerRadius="{DynamicResource DefaultRadiusNormal}" 
							Background="{DynamicResource PressedBrush}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="1" Opacity="0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOff_Storyboard}" />
                            </Trigger.ExitActions>
                            <!--<Setter TargetName="Thumb" Property="Background" Value="{DynamicResource DarkBrush}" />-->
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff_Storyboard}" />
                            </Trigger.ExitActions>
                            <!--<Setter TargetName="Thumb" Property="Background" Value="{DynamicResource PressedBrush}" />-->
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PressedOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="ThumbDragging" Storyboard.TargetProperty="Opacity" To="1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Thumb" Storyboard.TargetProperty="Opacity" To="0.3">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="ThumbDragging" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Thumb" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="ThumbOver" Storyboard.TargetProperty="Opacity" To="1" />
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="Thumb" Storyboard.TargetProperty="Opacity" To="0.3" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="ThumbOver" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Thumb" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>

                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="Thumb"
							CornerRadius="{DynamicResource DefaultRadiusNormal}" 
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="1" />
                        <Border x:Name="ThumbOver"
							CornerRadius="{DynamicResource DefaultRadiusNormal}" 
							Background="{DynamicResource VerticalDarkBrush}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="1" Opacity="0" />
                        <Border x:Name="ThumbDragging"
							CornerRadius="{DynamicResource DefaultRadiusNormal}" 
							Background="{DynamicResource VerticalPressedBrush}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="1" Opacity="0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOff_Storyboard}" />
                            </Trigger.ExitActions>
                            <!--<Setter TargetName="Thumb" Property="Background" Value="{DynamicResource DarkBrush}" />-->
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff_Storyboard}" />
                            </Trigger.ExitActions>
                            <!--<Setter TargetName="Thumb" Property="Background" Value="{DynamicResource PressedBrush}" />-->
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid Width="{TemplateBinding bs:MarkupExtensionProperties.SpecialWidth}">
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="{TemplateBinding bs:MarkupExtensionProperties.SpecialWidth}"/>
                <RowDefinition Height="*"/>
                <RowDefinition MaxHeight="{TemplateBinding bs:MarkupExtensionProperties.SpecialWidth}"/>
            </Grid.RowDefinitions>
            <Border
				Grid.RowSpan="3"
				CornerRadius="{DynamicResource DefaultRadiusNormal}" 
				Background="{DynamicResource ScrollBarBackgroundBrush}">
                <Border CornerRadius="{DynamicResource DefaultRadiusNormal}" x:Name="Track" Background="{DynamicResource ScrollBarPageButtonVertBrush}" Opacity="0" />
            </Border>
            <RepeatButton
				Grid.Row="0"                           
				Style="{DynamicResource ScrollBarLineButton}"
				Command="ScrollBar.LineUpCommand"
				Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track 
				x:Name="PART_Track"
				Grid.Row="1"
				IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton 
						Style="{DynamicResource ScrollBarPageButtonVert}"
						Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb
						Style="{DynamicResource VerticalScrollBarThumb}" 
						Margin="1,0,1,0"  
						Background="{DynamicResource VerticalNormalBrush}"
						BorderBrush="{DynamicResource HorizontalNormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton 
						Style="{DynamicResource ScrollBarPageButtonVert}"
						Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton 
				Grid.Row="3" 
				Style="{DynamicResource ScrollBarLineButton}"
				Command="ScrollBar.LineDownCommand"
				Content="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="Track" Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" To="1"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="Track" Duration="0:0:0.2" Storyboard.TargetProperty="Opacity"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid Height="{TemplateBinding bs:MarkupExtensionProperties.SpecialHeight}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="{TemplateBinding bs:MarkupExtensionProperties.SpecialHeight}"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MaxWidth="{TemplateBinding bs:MarkupExtensionProperties.SpecialHeight}"/>
            </Grid.ColumnDefinitions>
            <Border
				Grid.ColumnSpan="3"
				CornerRadius="{DynamicResource DefaultRadiusNormal}" 
				Background="{DynamicResource ScrollBarBackgroundBrush}">
                <Border CornerRadius="{DynamicResource DefaultRadiusNormal}" x:Name="Track" Background="{DynamicResource ScrollBarPageButtonHorizBrush}" Opacity="0" />
            </Border>
            <RepeatButton 
				Grid.Column="0"                           
				Style="{DynamicResource ScrollBarLineButton}"
				Command="ScrollBar.LineLeftCommand"
				Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track 
				x:Name="PART_Track"
				Grid.Column="1"
				IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton 
						Style="{DynamicResource ScrollBarPageButtonHoriz}"
						Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb 
						Style="{DynamicResource ScrollBarThumb}" 
						Margin="0,1,0,1"  
						Background="{DynamicResource NormalBrush}"
						BorderBrush="{DynamicResource NormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton 
						Style="{DynamicResource ScrollBarPageButtonHoriz}"
						Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton 
				Grid.Column="3" 
				Style="{DynamicResource ScrollBarLineButton}"
				Command="ScrollBar.LineRightCommand"
				Content="M 0 0 L 4 4 L 0 8 Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="Track" Duration="0:0:0.2" Storyboard.TargetProperty="Opacity" To="1"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetName="Track" Duration="0:0:0.2" Storyboard.TargetProperty="Opacity"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{DynamicResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{DynamicResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="bs:MarkupExtensionProperties.SpecialWidth" Value="18" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialHeight" Value="18" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border x:Name="Corner" Grid.Column="1" Background="{DynamicResource WindowBackgroundBrush}" Grid.Row="1" CornerRadius="0,2,0,2">
                            <ContentControl Content="{TemplateBinding bs:MarkupExtensionProperties.TrailingElement}" Focusable="False" />
                        </Border>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                        <ScrollBar Width="{TemplateBinding bs:MarkupExtensionProperties.SpecialWidth}" x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
                        <ScrollBar Height="{TemplateBinding bs:MarkupExtensionProperties.SpecialHeight}" x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource SolidBorderBrush}" BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SliderButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="14"/>
        <Setter Property="Width" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Ellipse 
						x:Name="Ellipse" 
						Fill="{DynamicResource NormalBrush}"
						Stroke="{DynamicResource NormalBorderBrush}"
						StrokeThickness="1.5" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource DarkBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource PressedBrush}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SliderThumbStyleDirected" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="12"/>
        <Setter Property="Width" Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Path Data="M6,0 18,0 18,12 6,12 0,6 Z"
						x:Name="Ellipse" 
						Fill="{DynamicResource NormalBrush}"
						Stroke="{DynamicResource NormalBorderBrush}"
						StrokeThickness="1" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource DarkBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource PressedBrush}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SliderThumbStyleDirectedHor" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Width" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Path Data="M0,6 0,18 12,18 12,6 6,0 Z"
						x:Name="Ellipse" 
						Fill="{DynamicResource NormalBrush}"
						Stroke="{DynamicResource NormalBorderBrush}"
						StrokeThickness="1" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource DarkBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource PressedBrush}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="HorizontalSlider" TargetType="{x:Type Slider}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TickBar 
				x:Name="TopTick"
				SnapsToDevicePixels="True" 
				Placement="Top"
				Fill="{DynamicResource GlyphBrush}"
				Height="4"
				Visibility="Collapsed" />
            <Border 
				x:Name="TrackBackground"
				Margin="0"
				CornerRadius="2" 
				Height="4"
				Grid.Row="1"
				Background="{TemplateBinding Background}" 
				BorderBrush="{DynamicResource NormalBorderBrush}"
				BorderThickness="1" />
            <Track Grid.Row="1" x:Name="PART_Track">
                <Track.DecreaseRepeatButton>
                    <RepeatButton 
						Style="{DynamicResource SliderButtonStyle}"
						Command="Slider.DecreaseLarge" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb x:Name="Thumb" Style="{DynamicResource SliderThumbStyle}" RenderTransformOrigin=".5 .5" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton 
						Style="{DynamicResource SliderButtonStyle}"
						Command="Slider.IncreaseLarge" />
                </Track.IncreaseRepeatButton>
            </Track>
            <TickBar 
				x:Name="BottomTick"
				SnapsToDevicePixels="True" 
				Grid.Row="2"
				Fill="{TemplateBinding Foreground}"
				Placement="Bottom"
				Height="4"
				Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Thumb" Property="Style" Value="{DynamicResource SliderThumbStyleDirectedHor}" />

            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Thumb" Property="Style" Value="{DynamicResource SliderThumbStyleDirectedHor}" />
                <Setter TargetName="Thumb" Property="RenderTransform" Value="1 0 0 -1 0 0" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="VerticalSlider" TargetType="{x:Type Slider}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TickBar 
				x:Name="TopTick"
				SnapsToDevicePixels="True" 
				Placement="Left"
				Fill="{DynamicResource GlyphBrush}"
				Width="4"
				Visibility="Collapsed" />
            <Border 
				x:Name="TrackBackground"
				Margin="0"
				CornerRadius="2" 
				Width="4"
				Grid.Column="1"
				Background="{TemplateBinding Background}" 
				BorderBrush="{DynamicResource HorizontalNormalBorderBrush}"
				BorderThickness="1" />
            <Track Grid.Column="1" x:Name="PART_Track">
                <Track.DecreaseRepeatButton>
                    <RepeatButton 
						Style="{DynamicResource SliderButtonStyle}"
						Command="Slider.DecreaseLarge" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb x:Name="Thumb" Style="{DynamicResource SliderThumbStyle}" RenderTransformOrigin=".5 .5" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton 
						Style="{DynamicResource SliderButtonStyle}"
						Command="Slider.IncreaseLarge" />
                </Track.IncreaseRepeatButton>
            </Track>
            <TickBar 
				x:Name="BottomTick"
				SnapsToDevicePixels="True" 
				Grid.Column="2"
				Fill="{TemplateBinding Foreground}"
				Placement="Right"
				Width="4"
				Visibility="Collapsed" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Thumb" Property="Style" Value="{DynamicResource SliderThumbStyleDirected}" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Thumb" Property="Style" Value="{DynamicResource SliderThumbStyleDirected}" />
                <Setter TargetName="Thumb" Property="RenderTransform" Value="-1 0 0 1 0 0" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type Slider}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MinWidth" Value="80" />
                <Setter Property="MinHeight" Value="21" />
                <Setter Property="Template" Value="{DynamicResource HorizontalSlider}" />
                <Setter Property="Background" Value="{DynamicResource LightBrush}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="MinWidth" Value="21" />
                <Setter Property="MinHeight" Value="80" />
                <Setter Property="Template" Value="{DynamicResource VerticalSlider}" />
                <Setter Property="Background" Value="{DynamicResource HorizontalLightBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type StatusBar}">
        <Setter Property="Background" Value="{DynamicResource VerticalNormalBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <DockPanel HorizontalAlignment="Stretch" LastChildFill="False" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style  TargetType="{x:Type TabControl}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource LightColorBrush}" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="{DynamicResource TabRadiusTop}" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="row1" Height="Auto"/>
                            <RowDefinition x:Name="row2" Height="*"/>
                            <RowDefinition x:Name="row3" Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="col1" Width="Auto" />
                            <ColumnDefinition x:Name="col2" Width="*" />
                            <ColumnDefinition x:Name="col3" Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <DockPanel x:Name="HeaderPanel" Grid.Row="0" Grid.Column="1" Panel.ZIndex="1" Margin="0,0,0,-1" >
                            <ContentControl Focusable="False" x:Name="trailElem" DockPanel.Dock="Right" Content="{TemplateBinding bs:MarkupExtensionProperties.TrailingElement}" />
                            <ContentControl Focusable="False" x:Name="leadElem" DockPanel.Dock="Left" Content="{TemplateBinding bs:MarkupExtensionProperties.LeadingElement}" />
                            <TabPanel x:Name="HeaderContentPanel" IsItemsHost="True" KeyboardNavigation.TabIndex="1" Background="Transparent" />
                        </DockPanel>

                        <Border
							x:Name="Border"
							Grid.Row="1" Grid.Column="1"
							BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
							BorderThickness="{TemplateBinding BorderThickness}"
							KeyboardNavigation.TabNavigation="Local"
							KeyboardNavigation.DirectionalNavigation="Contained"
							KeyboardNavigation.TabIndex="2"
                            ClipToBounds="True">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								x:Name="PART_SelectedContentHost" Margin="{TemplateBinding Padding}" ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                        </Trigger>

                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter TargetName="Border" Property="CornerRadius" Value="{DynamicResource TabRadiusBottom}" />
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="2" />
                            <Setter TargetName="HeaderPanel" Property="Margin" Value="4,-1,0,0" />

                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter TargetName="Border" Property="CornerRadius" Value="{DynamicResource TabRadiusLeft}" />
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="HeaderPanel" Property="Margin" Value="0,4,-1,0" />
                            <Setter TargetName="trailElem" Property="DockPanel.Dock" Value="Bottom" />
                            <Setter TargetName="leadElem" Property="DockPanel.Dock" Value="Top" />

                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">

                            <Setter TargetName="Border" Property="CornerRadius" Value="{DynamicResource TabRadiusRight}" />
                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1" />
                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="2" />
                            <Setter TargetName="HeaderPanel" Property="Margin" Value="-1,0,0,0" />
                            <Setter TargetName="trailElem" Property="DockPanel.Dock" Value="Bottom" />
                            <Setter TargetName="leadElem" Property="DockPanel.Dock" Value="Top" />

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RoundedTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="{DynamicResource TabItemRadius}" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="MouseOverOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" To="1" />
                            <DoubleAnimation Duration="0:0:0.3" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.3" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.1" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="grid">
                        <Grid>
                            <Border 
							x:Name="Border"
							Margin="0,0,-4,0" 
							Background="{DynamicResource NormalBrush}"
							BorderBrush="{DynamicResource SolidBorderBrush}" 
							BorderThickness="1,1,1,1" 
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" />
                            <Border 
							x:Name="BorderOver"
							Margin="0,0,-4,0" 
							Background="{DynamicResource DarkBrush}"
							BorderBrush="{DynamicResource SolidBorderBrush}" 
							BorderThickness="1,1,1,1" Opacity="0"
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" />
                            <ContentPresenter x:Name="ContentSite"
								    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								    ContentSource="Header"
								    Margin="{TemplateBinding Padding}"
								    RecognizesAccessKey="True"/>
                        </Grid>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TabItemSelectedBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOn_Storyboard}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOff_Storyboard}" />
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="LayoutTransform" TargetName="grid">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="LayoutTransform" TargetName="ContentSite">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="LayoutTransform" TargetName="grid">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="LayoutTransform" TargetName="ContentSite">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="LayoutTransform" TargetName="grid">
                                <Setter.Value>
                                    <RotateTransform Angle="180" />
                                </Setter.Value>

                            </Setter>
                            <Setter Property="LayoutTransform" TargetName="ContentSite">
                                <Setter.Value>
                                    <RotateTransform Angle="-180" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource RoundedTabItemStyle}" TargetType="{x:Type TabItem}"></Style>
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="None"/>
    </Style>
    <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="0" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="Foreground" Value="{DynamicResource OnWindowForegroundBrush}" />
        <Setter Property="ContextMenu" Value="{DynamicResource DecoTextBoxContextMenu}" />
        <Setter Property="CaretBrush" Value="{DynamicResource DisabledForegroundBrush}" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialBrush" Value="{DynamicResource PressedBorderBrush}" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialWidth" Value="300" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialHeight" Value="2" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <Grid MaxWidth="{Binding ElementName=MyAdorner, Path=ActualWidth}">
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <AdornedElementPlaceholder Name="MyAdorner" Grid.Row="1" Panel.ZIndex="-1" />
                        <Label Padding="5,2" Visibility="{Binding ElementName=MyAdorner, Path=AdornedElement.IsFocused, Converter={StaticResource btvc}}" MaxWidth="{Binding ElementName=MyAdorner, Path=AdornedElement.(bs:MarkupExtensionProperties.SpecialWidth)}" Foreground="White" BorderBrush="#FF444444" BorderThickness="5,1,1,0" Background="#BD00" VerticalAlignment="Top" HorizontalAlignment="Right" IsHitTestVisible="False" HorizontalContentAlignment="Right">
                            <Label.Triggers>
                                <EventTrigger RoutedEvent="Loaded">
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" Duration="0:0:.6">
                                                <DoubleAnimation.EasingFunction>
                                                    <ExponentialEase />
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </Label.Triggers>
                            <TextBlock TextWrapping="Wrap" Text="{Binding ElementName=MyAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"></TextBlock>
                        </Label>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup>
                                <VisualStateGroup.States>
                                    <VisualState Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="BorderOver" Duration="0:0:.4" Storyboard.TargetProperty="Opacity" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation To="1" Storyboard.TargetName="BorderOver" Duration="0:0:.4" Storyboard.TargetProperty="Opacity" />
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="Focused">
                                        <Storyboard>
                                            <DoubleAnimation To="1" Storyboard.TargetName="BorderOver" Duration="0:0:.2" Storyboard.TargetProperty="Opacity" />
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup.States>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <Border 
						        x:Name="Border"
					            CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}"	
						        Background="{TemplateBinding Background}"
						        BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}"/>
                            <Border 
						        x:Name="BorderOver" Opacity="0"
					            CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}"
						        BorderBrush="{TemplateBinding BorderBrush}"
						        BorderThickness="{TemplateBinding BorderThickness}">
                                <Border.Background>
                                    <SolidColorBrush Color="{DynamicResource WindowBackgroundHoverColor}" />
                                </Border.Background>
                            </Border>

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <ContentControl Margin="2,0,0,0" Content="{TemplateBinding bs:MarkupExtensionProperties.LeadingElement}" VerticalAlignment="Center" />
                                <ContentControl Margin="0,0,2,0" Grid.Column="2" Content="{TemplateBinding bs:MarkupExtensionProperties.TrailingElement}" VerticalAlignment="Center" />
                                <Border Visibility="{Binding (Validation.HasError), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource btvc}}" Grid.Column="3" VerticalAlignment="Center" Width="15" Height="14" HorizontalAlignment="Right" BorderBrush="White" BorderThickness="1" CornerRadius="7" Margin="0,0,4,0"
                                Opacity=".8" ToolTip="{Binding Path=(Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource TemplatedParent}}">
                                    <Border.Background>
                                        <SolidColorBrush Color="{DynamicResource ValidationErrorColor}" />
                                    </Border.Background>
                                    <Border.Triggers>
                                        <EventTrigger RoutedEvent="Loaded">
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" Duration="0:0:.6">
                                                        <DoubleAnimation.EasingFunction>
                                                            <ExponentialEase />
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </Border.Triggers>
                                    <TextBlock Foreground="White" Text="!" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                </Border>
                                <ScrollViewer HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="0" Background="Transparent"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Column="1" Margin="0" x:Name="PART_ContentHost" />
                                <ContentControl Margin="3,0,0,0" HorizontalAlignment="Left" Visibility="Hidden" x:Name="WatermarkText" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Opacity=".5" FontStyle="Italic" IsHitTestVisible="False" Grid.Column="1" Content="{TemplateBinding bs:MarkupExtensionProperties.Header}" />
                            </Grid>
                            <Line Grid.Column="1" x:Name="FocusedLineHelper" VerticalAlignment="Top"
                                  Margin="5,1"
                                  X2="48" IsHitTestVisible="False" Stroke="{TemplateBinding bs:MarkupExtensionProperties.SpecialBrush}" StrokeThickness="{TemplateBinding bs:MarkupExtensionProperties.SpecialHeight}"
                                  Visibility="Collapsed" StrokeEndLineCap="Triangle" StrokeStartLineCap="Triangle" />

                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="FocusedLineHelper" Property="Visibility" Value="Visible" />
                            <Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin" Value="False"/>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WatermarkText" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin" Value="False"/>
                                <Condition Property="Text" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WatermarkText" Value="Visible"/>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource ValidationErrorColor}" />
                                </Setter.Value>
                            </Setter>
                            <!--<Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors)[0].ErrorContent}"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate DataType="{x:Type ValidationError}">
        <TextBlock TextWrapping="WrapWithOverflow" FontStyle="Italic" HorizontalAlignment="Right" Text="{Binding Path=ErrorContent}">
            <TextBlock.Foreground>
                <SolidColorBrush Color="{DynamicResource ValidationErrorColor}" />
            </TextBlock.Foreground>
        </TextBlock>
    </DataTemplate>
    <Style TargetType="{x:Type TextBox}" x:Key="{x:Static ToolBar.TextBoxStyleKey}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="MinWidth" Value="16" />
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="0" />
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}" />
        <Setter Property="Padding" Value="2,0" />
        <Setter Property="Foreground" Value="{DynamicResource OnWindowForegroundBrush}" />
        <Setter Property="ContextMenu" Value="{DynamicResource DecoTextBoxContextMenu}" />
        <Setter Property="CaretBrush" Value="{DynamicResource DisabledForegroundBrush}" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="Border"
        						CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}"	
        						Background="{TemplateBinding Background}"
        						BorderBrush="{TemplateBinding BorderBrush}"
        						BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <ContentControl Content="{TemplateBinding bs:MarkupExtensionProperties.LeadingElement}" VerticalAlignment="Center" />
                                <ContentControl Grid.Column="2" Content="{TemplateBinding bs:MarkupExtensionProperties.TrailingElement}" VerticalAlignment="Center" />
                                <ScrollViewer HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Background="Transparent"
        								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Column="1" Margin="0" x:Name="PART_ContentHost" />
                                <ContentControl Margin="3,0,0,0" HorizontalAlignment="Left" Visibility="Hidden" x:Name="WatermarkText" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Opacity=".5" FontStyle="Italic" IsHitTestVisible="False" Grid.Column="1" Content="{TemplateBinding bs:MarkupExtensionProperties.Header}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin" Value="False"/>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WatermarkText" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin" Value="False"/>
                                <Condition Property="Text" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WatermarkText" Value="Visible"/>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource ValidationErrorColor}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinHeight" Value="16" />
        <Setter Property="MinWidth" Value="16" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="{DynamicResource DefaultRadiusNormal}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PressedOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="BorderPressed" Storyboard.TargetProperty="Opacity" To="1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.08" Storyboard.TargetName="BorderPressed" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.08" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.08" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" To="1" />
                            <DoubleAnimation Duration="0:0:0.15" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.15" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.08" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border 
							x:Name="Border"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							Background="{TemplateBinding Background}"
						    BorderBrush="{TemplateBinding BorderBrush}"
						    BorderThickness="{TemplateBinding BorderThickness}" />
                        <Border 
							x:Name="BorderOver"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							BorderThickness="1"
							Background="{DynamicResource DarkBrush}"
							BorderBrush="{DynamicResource NormalBorderBrush}"  Opacity="0"/>
                        <Border 
							x:Name="BorderPressed"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							BorderThickness="1"
							Background="{DynamicResource TogglePressedBrush}"
							BorderBrush="{DynamicResource PressedBorderBrush}" Opacity="0" />

                        <Grid x:Name="iconPresenter" Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <ContentControl Focusable="False" Content="{TemplateBinding bs:MarkupExtensionProperties.Icon}" />
                            <ContentPresenter Grid.Column="1" x:Name="contentPresenter" RecognizesAccessKey="True" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>


                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1.5" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                            <!--<Setter TargetName="Border" Property="BorderThickness" Value="1.5" />-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOff_Storyboard}" />
                            </Trigger.ExitActions>
                        </Trigger>


                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff_Storyboard}" />
                            </Trigger.ExitActions>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="false" />
                                <Condition Property="IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn_Storyboard}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff_Storyboard}" />
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.8" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource {x:Type ToggleButton}}" x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="1,0" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="0" />
    </Style>
    <Style TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="{DynamicResource LightColorBrush}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding}" Value="true">
                <Setter Property="Background" Value="{DynamicResource LightColorBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="{DynamicResource LightColorBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid x:Name="Grid" Margin="3,1,1,1" SnapsToDevicePixels="True">
                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                            <ToggleButton x:Name="OverflowButton" ClickMode="Press" FocusVisualStyle="{x:Null}" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="Background" Value="{DynamicResource LightBrush}"/>
                                        <Setter Property="MinHeight" Value="0"/>
                                        <Setter Property="MinWidth" Value="0"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="0,3,3,0" SnapsToDevicePixels="True">
                                                        <Canvas HorizontalAlignment="Right" Height="7" Margin="7,2,2,2" SnapsToDevicePixels="True" VerticalAlignment="Bottom" Width="6">
                                                            <Path Data="M1,1.5L6,1.5" Stroke="White"/>
                                                            <Path Data="M0,0.5L5,0.5" Stroke="{TemplateBinding Foreground}"/>
                                                            <Path Data="M0.5,4L6.5,4 3.5,7z" Fill="White"/>
                                                            <Path Data="M-0.5,3L5.5,3 2.5,6z" Fill="{TemplateBinding Foreground}"/>
                                                        </Canvas>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                                                        </Trigger>
                                                        <Trigger Property="IsKeyboardFocused" Value="True">
                                                            <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Foreground" Value="#FF6D6D6D"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding}" Value="true">
                                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <Popup x:Name="OverflowPopup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" StaysOpen="False">
                                <Border x:Name="ToolBarSubMenuBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" RenderOptions.ClearTypeHint="Enabled">
                                    <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle" FocusVisualStyle="{x:Null}" Focusable="True" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200"/>
                                </Border>
                            </Popup>
                        </Grid>
                        <Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="Margin" Value="0,0,11,0"/>
                                    <Setter Property="CornerRadius" Value="3"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding}" Value="true">
                                            <Setter Property="CornerRadius" Value="0"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <Thumb x:Name="ToolBarThumb" Margin="-3,-1,0,0" Padding="6,5,1,6" Width="10">
                                    <Thumb.Style>
                                        <Style TargetType="{x:Type Thumb}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Thumb}">
                                                        <Border Background="Transparent" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                                            <Rectangle>
                                                                <Rectangle.Fill>
                                                                    <DrawingBrush TileMode="Tile" Viewbox="0,0,4,4" Viewport="0,0,4,4" ViewportUnits="Absolute" ViewboxUnits="Absolute">
                                                                        <DrawingBrush.Drawing>
                                                                            <DrawingGroup>
                                                                                <GeometryDrawing Brush="White" Geometry="M1,1L1,3 3,3 3,1z"/>
                                                                                <GeometryDrawing Brush="#FF6D6D6D" Geometry="M0,0L0,2 2,2 2,0z"/>
                                                                            </DrawingGroup>
                                                                        </DrawingBrush.Drawing>
                                                                    </DrawingBrush>
                                                                </Rectangle.Fill>
                                                            </Rectangle>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Cursor" Value="SizeAll"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </Thumb.Style>
                                </Thumb>
                                <ContentPresenter x:Name="ToolBarHeader" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="True" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="True">
                            <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="False"/>
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="True">
                            <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="True">
                            <!--TODO-->
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
                            <Setter Property="Style" TargetName="OverflowButton">
                                <Setter.Value>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="Background" Value="#FFEEF5FD"/>
                                        <Setter Property="MinHeight" Value="0"/>
                                        <Setter Property="MinWidth" Value="0"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border x:Name="Bd" Background="{TemplateBinding Background}" CornerRadius="0,0,3,3" SnapsToDevicePixels="True">
                                                        <Canvas HorizontalAlignment="Right" Height="6" Margin="2,7,2,2" SnapsToDevicePixels="True" VerticalAlignment="Bottom" Width="7">
                                                            <Path Data="M1.5,1L1.5,6" Stroke="White"/>
                                                            <Path Data="M0.5,0L0.5,5" Stroke="{TemplateBinding Foreground}"/>
                                                            <Path Data="M3.5,0.5L7,3.5 4,6.5z" Fill="White"/>
                                                            <Path Data="M3,-0.5L6,2.5 3,5.5z" Fill="{TemplateBinding Foreground}"/>
                                                        </Canvas>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                                                        </Trigger>
                                                        <Trigger Property="IsKeyboardFocused" Value="True">
                                                            <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Foreground" Value="#FF6D6D6D"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding}" Value="true">
                                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
                            <Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
                            <Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0"/>
                            <Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1"/>
                            <Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
                            <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
                            <Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
                            <Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
                            <Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
                            <Setter Property="Placement" TargetName="OverflowPopup" Value="Right"/>
                            <Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
                            <Setter Property="Background" Value="#FFEEF5FD"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToolBar}" x:Key="FlatToolBar">
        <Setter Property="Background" Value="{DynamicResource LightColorBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}">
                            <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <ContentPresenter x:Name="ToolBarHeader" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Center" Margin="2,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="True" Margin="2,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
                            <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
                            <Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
                            <Setter Property="Background" Value="#FFEEF5FD"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static ToolBar.MenuStyleKey}" BasedOn="{StaticResource {x:Type Menu}}" TargetType="Menu">
    </Style>

    <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="ComboBox">
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="0" />
    </Style>

    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" BasedOn="{StaticResource {x:Type RadioButton}}" TargetType="RadioButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="bs:MarkupExtensionProperties.CornerRadius" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}"/>
        <Setter Property="Foreground" Value="{DynamicResource UiForegroundBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PressedOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="BorderPressed" Storyboard.TargetProperty="Opacity" To="1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="PressedOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.08" Storyboard.TargetName="BorderPressed" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.08" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOn_Storyboard">
                            <DoubleAnimation Duration="0:0:0.08" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" To="1" />
                            <DoubleAnimation Duration="0:0:0.15" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" To="0" />
                        </Storyboard>
                        <Storyboard x:Key="MouseOverOff_Storyboard">
                            <DoubleAnimation Duration="0:0:0.15" Storyboard.TargetName="BorderOver" Storyboard.TargetProperty="Opacity" />
                            <DoubleAnimation Duration="0:0:0.08" Storyboard.TargetName="Border" Storyboard.TargetProperty="Opacity" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border 
							x:Name="Border"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							Background="{TemplateBinding Background}"
						    BorderBrush="{TemplateBinding BorderBrush}"
						    BorderThickness="{TemplateBinding BorderThickness}" />
                        <Border 
							x:Name="BorderOver"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							BorderThickness="1"
							Background="{DynamicResource DarkBrush}"
							BorderBrush="{DynamicResource NormalBorderBrush}"  Opacity="0"/>
                        <Border 
							x:Name="BorderPressed"  
							CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
							BorderThickness="1"
							Background="{DynamicResource TogglePressedBrush}"
							BorderBrush="{DynamicResource PressedBorderBrush}" Opacity="0" />

                        <Grid x:Name="iconPresenter" Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <ContentControl Focusable="False" Content="{TemplateBinding bs:MarkupExtensionProperties.Icon}" />
                            <ContentPresenter Grid.Column="1" x:Name="contentPresenter" RecognizesAccessKey="True" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>


                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1.5" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" />
                            <!--<Setter TargetName="Border" Property="BorderThickness" Value="1.5" />-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseOverOff_Storyboard}" />
                            </Trigger.ExitActions>
                        </Trigger>


                        <Trigger Property="IsPressed" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn_Storyboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff_Storyboard}" />
                            </Trigger.ExitActions>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="false" />
                                <Condition Property="IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOn_Storyboard}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource PressedOff_Storyboard}" />
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.8" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource OnWindowForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border x:Name="Border"
						Background="{DynamicResource LightBrush}"
						BorderBrush="{DynamicResource SolidBorderBrush}"
						BorderThickness="1"
						Width="{TemplateBinding Width}"
						Height="{TemplateBinding Height}">
                        <ContentPresenter
							Margin="4" 
							HorizontalAlignment="Left"
							VerticalAlignment="Top" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="CornerRadius" Value="4"/>
                            <Setter TargetName="Border" Property="SnapsToDevicePixels" Value="true"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type TreeView}" TargetType="{x:Type TreeView}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialWidth" Value="18" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialHeight" Value="18" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource SolidBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <!--<EventSetter Event="Drop" Handler="treeView_Drop"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border 
						x:Name="Border" 
						CornerRadius="{TemplateBinding bs:MarkupExtensionProperties.CornerRadius}" 
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer x:Name="ScrollViewer" Padding="{TemplateBinding Padding}" Focusable="False">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="ScrollViewer" Property="Opacity" Value="0.7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ToggleRotateOn">
                            <DoubleAnimation Storyboard.TargetName="toggleRotation" Storyboard.TargetProperty="Angle" To="45" Duration="0:0:0.15">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="ToggleRotateOff">
                            <DoubleAnimation Storyboard.TargetName="toggleRotation" Storyboard.TargetProperty="Angle" Duration="0:0:0.15">
                                <DoubleAnimation.EasingFunction>
                                    <PowerEase />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid UseLayoutRounding="True"
						Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="14" Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Path x:Name="ExpandPath"
							HorizontalAlignment="Center" 
							VerticalAlignment="Center"
							Margin="1,4,1,1" RenderTransformOrigin=".5,.5"
							Fill="White"
                            Stroke="{DynamicResource GlyphBrush}"
                            StrokeThickness="1"
							Data="M 0 0 L 3.5 3.5 L 0 7 Z">
                            <Path.RenderTransform>
                                <RotateTransform x:Name="toggleRotation" />
                            </Path.RenderTransform>
                        </Path>
                        <ContentPresenter Grid.Column="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
							Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ToggleRotateOn}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource ToggleRotateOff}" />
                            </Trigger.ExitActions>
                            <Setter Property="Fill"
								TargetName="ExpandPath"
								Value="{DynamicResource GlyphBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="#FF2D98BB" />
                            <Setter TargetName="ExpandPath" Property="Fill" Value="#FFAAD0DE" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TreeViewItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="0,3,0,3" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialWidth" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Rectangle x:Name="OffsetRect" Width="{TemplateBinding bs:MarkupExtensionProperties.SpecialWidth}" />
                        <Border x:Name="Border" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" />
                        <Rectangle Name="FocusRect" Grid.Column="1" Stroke="#60000000" StrokeDashArray="1 2" Visibility="Hidden" Grid.ColumnSpan="2"/>
                        <ToggleButton Grid.ColumnSpan="2"
							x:Name="Expander"
							Style="{DynamicResource ExpandCollapseToggleStyle}"
							IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
							ClickMode="Press" />
                        <Grid Background="Transparent" x:Name="PART_Header" Grid.ColumnSpan="2" Margin="16,0,0,0">
                            <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                        <ItemsPresenter Grid.Column="1" Grid.Row="1" x:Name="ItemsHost" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="OffsetRect" Property="Width" Value="8" />
                            <Setter TargetName="PART_Header" Property="Margin" Value="3,0,0,0" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectedBackgroundBrush}"/>
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource HighLightForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource OnWindowForegroundBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource SelectedUnfocusedColor}" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Window (Beta) Style -->

    <Style x:Key="BrightSharpWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="bs:MarkupExtensionProperties.SpecialBrush" Value="{DynamicResource WindowInnerBorderBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource WindowBorderBrush}" />
        <Setter Property="bs:MarkupExtensionProperties.UseMinMaxSizeBehavior" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Icon" Value="icons/app.png" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="30" ResizeBorderThickness="4" CornerRadius="0" GlassFrameThickness="0" UseAeroCaptionButtons="False" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource OnWindowForegroundBrush}"/>
        <Setter Property="Background" Value="{DynamicResource GradientWindowBackgroundBrush}"/>
        <Setter Property="bs:MarkupExtensionProperties.Header" Value="{Binding Path=Title, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Border x:Name="InnerBorder" BorderBrush="{TemplateBinding bs:MarkupExtensionProperties.SpecialBrush}" BorderThickness="1">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="30" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Border x:Name="HeaderBorder" Background="{DynamicResource WindowHeaderBrush}">
                                    <DockPanel>
                                        <Image Width="16" Height="16" Source="{TemplateBinding Icon}" Margin="8" VerticalAlignment="Top" DockPanel.Dock="Left" />
                                        <StackPanel x:Name="ButtonPanel" DockPanel.Dock="Right" Orientation="Horizontal" VerticalAlignment="Top" Margin="1">
                                            <StackPanel.Resources>
                                                <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
                                                    <GradientStop Color="Transparent" Offset="0.0"/>
                                                </LinearGradientBrush>
                                                <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
                                                    <GradientStop Color="WhiteSmoke" Offset="0.0"/>
                                                </LinearGradientBrush>
                                            </StackPanel.Resources>
                                            <Button Padding="10,6" VerticalAlignment="Top" Name="PART_MinimizeButton" Click="minimizeButton_Click" Focusable="False" WindowChrome.IsHitTestVisibleInChrome="True" Content="0" bs:MarkupExtensionProperties.CornerRadius="0" BorderBrush="Transparent" FontFamily="Webdings" />
                                            <Button Padding="10,6" VerticalAlignment="Top" Name="PART_MaximizeButton" Click="maximizeButton_Click" Focusable="False" WindowChrome.IsHitTestVisibleInChrome="True" Content="1" bs:MarkupExtensionProperties.CornerRadius="0" BorderBrush="Transparent" FontFamily="Webdings" />
                                            <Button Padding="10,6" Name="PART_CloseButton" Click="closeButton_Click" Focusable="False" WindowChrome.IsHitTestVisibleInChrome="True" Content="r" bs:MarkupExtensionProperties.CornerRadius="0" BorderBrush="Transparent" FontFamily="Webdings">
                                                <Button.Background>
                                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                        <GradientStop Color="Transparent" Offset="0.0"/>
                                                    </LinearGradientBrush>
                                                </Button.Background>
                                                <Button.Resources>
                                                    <LinearGradientBrush x:Key="DarkBrush" EndPoint="0,1" StartPoint="0,0">
                                                        <GradientStop Color="#FFFF8A8A" Offset="0"/>
                                                        <GradientStop Color="#FFD14D4D" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </Button.Resources>
                                            </Button>
                                        </StackPanel>
                                        <Label Padding="0,5" Foreground="White" HorizontalContentAlignment="{TemplateBinding bs:MarkupExtensionProperties.HeaderHorizontalAlignment}" Content="{TemplateBinding bs:MarkupExtensionProperties.Header}" FontSize="14">
                                            <Label.Effect>
                                                <DropShadowEffect BlurRadius="2" ShadowDepth="1" Color="Black" />
                                            </Label.Effect>
                                        </Label>
                                    </DockPanel>
                                </Border>
                                <AdornerDecorator Grid.Row="1" x:Name="Decorator" ClipToBounds="True">
                                    <ContentPresenter x:Name="ContentPresenter" />
                                </AdornerDecorator>
                                <ResizeGrip WindowChrome.ResizeGripDirection="BottomRight" Grid.Row="3" x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowStyle" Value="ToolWindow">
                            <Setter TargetName="PART_MaximizeButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_MinimizeButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="PART_MaximizeButton" Property="Content" Value="2" />
                            <Setter TargetName="InnerBorder" Property="BorderThickness" Value="0" />
                            <Setter Property="WindowChrome.WindowChrome">
                                <Setter.Value>
                                    <WindowChrome CaptionHeight="30" ResizeBorderThickness="0" GlassFrameThickness="0" UseAeroCaptionButtons="False" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ButtonPanel" Property="Margin" Value="-1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                                <Condition Property="WindowState" Value="Normal"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter TargetName="HeaderBorder" Property="Background" Value="{DynamicResource WindowHeaderInactiveBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>